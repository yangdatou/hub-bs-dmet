#INFO: **** input file is /Users/yangjunjie/work/hub-bs-dmet/fitting.py ****
import os, sys, typing
from typing import List, Tuple, Callable
sys.path.append(".")

from functools import reduce

import numpy, scipy
from scipy import linalg
from scipy.optimize import basinhopping

import jax
import jax.numpy as jnumpy
from jax.scipy.linalg import eigh
from jax.scipy.optimize import minimize

from pyscf import lib

class LossFunctionMixin(lib.StreamObject):
    spin   = None

    def __init__(self, h1e: numpy.ndarray, rdm1_tag: numpy.ndarray, fit_inds: numpy.ndarray,
                 nelecs: Tuple[int, int], loss_func_type: int = 1, stdout: typing.TextIO = sys.stdout):
        self.stdout = stdout

        spin = self.spin
        assert spin is not None

        # Convert fit_inds to a JAX array and extract dimensions
        fit_inds = jnumpy.asarray(fit_inds)
        nfrag    = fit_inds.shape[0]
        nimp     = fit_inds.shape[1]
        nsite    = nimp * nfrag

        ind_triu = jnumpy.triu_indices(nimp)
        num_triu = ind_triu[0].shape[0]
        num_parm = num_triu * spin
        
        # Ensure that dimensions of f1e and rdm1_tag match expected dimensions
        assert h1e.shape      == (nsite, nsite)
        assert rdm1_tag.shape == (nsite, nsite)

        self.h1e = h1e
        self.rdm1_tag = rdm1_tag
        self.fit_inds = fit_inds
        self.nelecs = nelecs
        self.loss_func_type = loss_func_type

        self.ind_triu = ind_triu
        self.num_triu = num_triu
        self.num_parm = num_parm

        self.nfrag    = nfrag
        self.nimp     = nimp
        self.nsite    = nsite

        h1es = jnumpy.zeros((spin, nsite, nsite))
        h1es = h1es.at[0].set(h1e)
        h1es = h1es.at[-1].set(h1e)
        self.h1es = h1es

        get_v1es = self._gen_get_v1es()
        get_rdm1 = self._gen_get_rdm1()

        # Helper functions
        self._get_v1es = self._gen_get_v1es()
        self._get_rdm1 = self._gen_get_rdm1()
        
        # If the number of fragments is 1, then all the
        # types of loss functions are equivalent.
        assert loss_func_type == 1 or nfrag != 1

        if loss_func_type == 1:
            def func(xs):
                # Fill the correlation potential and calculate f1e
                v1es_fit = get_v1es(xs)
                f1es_fit = h1es + v1es_fit
                # Obtain the total RDM
                rdm1_fit = get_rdm1(f1es_fit)[0]
                # Calculate the difference between the target and fitted RDMs
                rdm1_err = rdm1_tag - rdm1_fit
                
                # The loss function is the norm of the RDM difference
                err = jnumpy.linalg.norm(rdm1_err)
                return err

        elif loss_func_type == 2:
            def func(xs):
                # Fill the correlation potential and calculate f1e
                v1es_fit = get_v1es(xs)
                f1es_fit = h1es + v1es_fit
                # Obtain the total RDM
                rdm1_fit = get_rdm1(f1es_fit)[0]
                # Calculate the difference between the target and fitted RDMs
                rdm1_err = rdm1_tag - rdm1_fit

                # The loss function is the sum of the norms of the RDM differences for each fragment
                err = sum([jnumpy.linalg.norm(rdm1_err[fit_ind][:, fit_ind]) for fit_ind in fit_inds])
                return err

        elif loss_func_type == 3:
            def func(xs):
                # Fill the correlation potential and calculate f1e
                v1es_fit = get_v1es(xs)
                f1es_fit = h1es + v1es_fit
                # Obtain the total RDM
                rdm1_fit = get_rdm1(f1es_fit)[0]
                # Calculate the difference between the target and fitted RDMs
                rdm1_err = rdm1_tag - rdm1_fit

                # The loss function is the sum of the norms of the RDM differences for each fragment
                err  = jnumpy.linalg.norm(rdm1_err)
                err += sum([jnumpy.linalg.norm(rdm1_err[fit_ind][:, fit_ind]) for fit_ind in fit_inds])
                return err

        else:
            raise ValueError("Invalid loss function type.")

        self.func = (lambda x: numpy.array(func(x)))
        self.grad = (lambda x: numpy.array(jax.grad(func)(x)))
        self.hess = (lambda x: numpy.array(jax.hessian(func)(x)))
        self._dump_info()

    def _dump_info(self):
        info = self.__dict__
        class_name = " " + self.__class__.__name__ + " "
        self.stdout.write("\n\n" + "#" * 20 + class_name + "#" * 20 + "\n")
        self.stdout.write("Loss Function Info:\n")
        
        for k, v in info.items():
            self.stdout.write(f"{k} = {v}\n")

        self.stdout.write("#" * (40 +  len(class_name)) + "\n")

    def _gen_get_v1es(self):
        spin     = self.spin
        nsite    = self.nsite
        nimp     = self.nimp
        nfrag    = self.nfrag

        num_triu = self.num_triu
        ind_triu = self.ind_triu
        fit_inds = self.fit_inds

        def get_v1es(xs):
            assert xs.shape == (spin * num_triu,)
            v1es = jnumpy.zeros((spin, nsite, nsite))

            for s, x in enumerate(jnumpy.split(xs, spin)):
                for fit_ind in fit_inds:
                    ind_0 = fit_ind[ind_triu[0]]
                    ind_1 = fit_ind[ind_triu[1]]
                    v1es  = v1es.at[s, ind_0, ind_1].set(x)

                v1e_sym = v1es[s] + jnumpy.transpose(v1es[s]) - jnumpy.diag(jnumpy.diag(v1es[s]))
                v1es    = v1es.at[s].set(v1e_sym)
            
            return v1es

        return get_v1es

    def _gen_get_rdm1(self, is_debug = False):
        raise NotImplementedError

class RestrictedSpinLossFunction(LossFunctionMixin):
    spin = 1
    def _gen_get_rdm1(self):
        spin     = self.spin
        nsite    = self.nsite
        nimp     = self.nimp
        nfrag    = self.nfrag

        nelec_alph, nelec_beta = self.nelecs

        num_triu = self.num_triu
        ind_triu = self.ind_triu
        fit_inds = self.fit_inds

        def get_rdm1(f1es):
            assert f1es.shape  == (spin, nsite, nsite)
            assert nelec_alpha == nelec_beta

            f1e_aa = f1e_bb = f1es[0]
            mo_ene_alph, mo_coeff_alph = eigh(f1e_aa)
            mo_ene_beta, mo_coeff_beta = mo_ene_alph, mo_coeff_alph

            occ_idx_alph = jnumpy.argsort(mo_ene_alph)[:nelec_alph]
            occ_idx_beta = jnumpy.argsort(mo_ene_beta)[:nelec_beta]

            coeff_occ_alph = mo_coeff_alph[:, occ_idx_alph]
            coeff_occ_beta = mo_coeff_beta[:, occ_idx_beta]

            rdm1_fit_alph  = jnumpy.dot(coeff_occ_alph, coeff_occ_alph.T)
            rdm1_fit_beta  = jnumpy.dot(coeff_occ_beta, coeff_occ_beta.T)

            gdm1 = jnumpy.zeros((2 * nsite, 2 * nsite))
            gdm1 = gdm1.at[:nsite, :nsite].set(rdm1_fit_alph)
            gdm1 = gdm1.at[nsite:, nsite:].set(rdm1_fit_beta)

            return rdm1_fit_alph + rdm1_fit_beta, gdm1

        return get_rdm1

class UnrestrictedSpinLossFunction(LossFunctionMixin):
    spin = 2
    def _gen_get_rdm1(self):
        spin     = self.spin
        nsite    = self.nsite
        nimp     = self.nimp
        nfrag    = self.nfrag

        nelec_alph, nelec_beta = self.nelecs

        num_triu = self.num_triu
        ind_triu = self.ind_triu
        fit_inds = self.fit_inds

        def get_rdm1(f1es):
            assert f1es.shape  == (spin, nsite, nsite)
            assert nelec_alpha == nelec_beta

            f1e_aa, f1e_bb = f1es
            mo_ene_alph, mo_coeff_alph = eigh(f1e_aa)
            mo_ene_beta, mo_coeff_beta = eigh(f1e_bb)

            occ_idx_alph = jnumpy.argsort(mo_ene_alph)[:nelec_alph]
            occ_idx_beta = jnumpy.argsort(mo_ene_beta)[:nelec_beta]

            coeff_occ_alph = mo_coeff_alph[:, occ_idx_alph]
            coeff_occ_beta = mo_coeff_beta[:, occ_idx_beta]

            rdm1_fit_aa  = jnumpy.dot(coeff_occ_alph, coeff_occ_alph.T)
            rdm1_fit_bb  = jnumpy.dot(coeff_occ_beta, coeff_occ_beta.T)

            gdm1_fit = jnumpy.block([[rdm1_fit_aa, jnumpy.zeros((nsite, nsite))], [jnumpy.zeros((nsite, nsite)), rdm1_fit_bb]])

            return rdm1_fit_alph + rdm1_fit_beta, gdm1_fit

        return get_rdm1

class GeneralizedSpinLossFunction(LossFunctionMixin):
    spin = 4
    def _gen_get_rdm1(self):
        spin     = self.spin
        nsite    = self.nsite
        nimp     = self.nimp
        nfrag    = self.nfrag

        nelec_alpha, nelec_beta = self.nelecs

        num_triu = self.num_triu
        ind_triu = self.ind_triu
        fit_inds = self.fit_inds

        def get_rdm1(f1es):
            assert f1es.shape  == (spin, nsite, nsite)
            assert nelec_alpha == nelec_beta

            f1e_aa, f1e_ab, f1e_ba, f1e_bb = f1es
            f1e_g = jnumpy.block([[f1e_aa, f1e_ab], [f1e_ba, f1e_bb]])

            mo_ene_g, mo_coeff_g = eigh(f1e_g)
            occ_idx_g = jnumpy.argsort(mo_ene_g)[:(nelec_alpha + nelec_beta)]

            coeff_occ_g = mo_coeff_g[:, occ_idx_g]
            gdm1_fit = jnumpy.dot(coeff_occ_g, coeff_occ_g.T)

            rdm1_fit_alph = gdm1_fit[:nsite, :nsite]
            rdm1_fit_beta = gdm1_fit[nsite:, nsite:]

            return rdm1_fit_alph + rdm1_fit_beta, gdm1_fit

        return get_rdm1

RLF = RestrictedSpinLossFunction
ULF = UnrestrictedSpinLossFunction
GLF = GeneralizedSpinLossFunction

from utils import print_matrix
from utils import RestrictedElectronicStructureProblem

from utils import solve_restricted_hartree_fock
from utils import solve_unrestricted_hartree_fock
from utils import solve_direct_spin1_full_configuration_interaction

from hub import build_hub_model
hub_u = 8.0
nsite  = 6
is_debug = True

for nelecs in [(2, 2), (3, 3), (4, 4)]:
    if is_debug and (not nelecs == (2, 2)):
        continue

    log = open(f"./log/hub-u-{hub_u:6.4f}-nelec-{nelecs[0]+nelecs[1]}" + ".log", "w")

    hub_obj         = build_hub_model(nsite, nelecs, hub_u)
    hub_obj.verbose = 4
    hub_obj.stdout  = log
    dm0_alph, dm0_beta = (lambda xs: (numpy.diag(xs[0]), numpy.diag(xs[1][::-1])))(numpy.asarray([[1, 0] for _ in range(nsite)]).reshape(2, -1))

    res_rhf = solve_restricted_hartree_fock(hub_obj,   dm0=dm0_alph+dm0_beta)
    res_uhf = solve_unrestricted_hartree_fock(hub_obj, dm0=(dm0_alph, dm0_beta))
    res_fci = solve_direct_spin1_full_configuration_interaction(hub_obj)

    ene_rhf = res_rhf.get_ene()
    ene_uhf = res_uhf.get_ene()
    ene_fci = res_fci.get_ene()

    r_rdm1_rhf = res_rhf.get_r_rdm1()
    r_rdm1_uhf = res_uhf.get_r_rdm1()
    r_rdm1_fci = res_fci.get_r_rdm1()
    rdm1_tag   = r_rdm1_fci

    for res in [res_rhf, res_uhf, res_fci]:
        ene    = res.get_ene()
        r_rdm1 = res.get_r_rdm1()
        u_rdm1 = res.get_u_rdm1()

        dm_err = numpy.abs(r_rdm1_fci - r_rdm1) 
        err_max = numpy.max(dm_err)
        err_avg = numpy.linalg.norm(dm_err) / numpy.size(dm_err)

        print(f"\n\n{res.__class__.__name__}", file=log)
        print(f"Energy: {ene:6.4f}, Error Max: {err_max:6.4e}, Avg: {err_avg:6.4e}", file=log)
        print_matrix(r_rdm1,    t="r_rdm1 = ", stdout=log)
        print_matrix(u_rdm1[0], t="u_rdm1_alph = ", stdout=log)
        print_matrix(u_rdm1[1], t="u_rdm1_beta = ", stdout=log)

    for igen_loss, LF in enumerate([RLF, ULF, GLF]):
        for (nimp, loss_func_type) in [(2, 1), (2, 2), (2, 3), (nsite, 1)]:
            if is_debug and (not (nimp == nsite and loss_func_type == 1 and igen_loss == 2)):
                continue
            
            fit_inds = numpy.asarray([[i+ifrag*nimp for i in range(nimp)] for ifrag in range(nsite // nimp)])
            kwargs   = {"stdout": log, "fit_inds": fit_inds, "nelecs": nelecs, "loss_func_type": loss_func_type}

            lf       = LF(hub_obj.h1, rdm1_tag, **kwargs)
            print("\n\n" + "#"*20, file=log)
            print(f"{lf.__class__.__name__}", file=log)
            print(f"nimp = {nimp}, nsite = {nsite}", file=log)
            print(f"nelecs = {nelecs}", file=log)
            print(f"loss_func_type = {loss_func_type}", file=log)

            x0 = numpy.zeros(lf.num_parm)

            global count, ymin
            count = 0
            ymin  = None

            def callback(x, y, accepted):
                # Fill the correlation potential and calculate f1e
                v1es_fit = lf._get_v1es(x)
                f1es_fit = lf.h1es + v1es_fit
                # Obtain the total RDM
                rdm1_fit, gdm1_fit = lf._get_rdm1(f1es_fit)
                # Calculate the difference between the target and fitted RDMs
                rdm1_err = jnumpy.abs(rdm1_tag - rdm1_fit)

                err_mean = jnumpy.linalg.norm(rdm1_err) / numpy.size(rdm1_err)
                err_max  = jnumpy.max(rdm1_err)

                global count, ymin
                ymin = y if ymin is None else min(ymin, y)
                
                if is_debug:
                    print(f"count = {count:4d}, y = {y:6.4e}, ymin = {ymin:6.4e}, " + f"x = [" + " ".join([f"{xi:6.4f}" for xi in x]) + "]")

                print(f"count = {count:4d}, y = {y:6.4e}, ymin = {ymin:6.4e}, " + f"x = [" + " ".join([f"{xi:6.4f}" for xi in x])+"]", file=log)
                count += 1

            kwargs = {
                "method": "bfgs", 
                "jac": lf.grad, "tol": 1e-6, 
                "options": {"disp": False, "maxiter": 1000}
                }

            res = basinhopping(
                lf.func, x0, T=0.1, stepsize=2.0, disp=False,
                callback=callback, minimizer_kwargs=kwargs, 
                niter=4000, niter_success=100, interval=10, 
                )

            x = res.x
            f1es_fit = lf.h1es + lf._get_v1es(x)
            rdm1_fit = lf._get_rdm1(f1es_fit)[0]
            rdm1_err = jnumpy.abs(rdm1_tag - rdm1_fit)
            err_mean = jnumpy.linalg.norm(rdm1_err) / numpy.size(rdm1_err)
            err_max  = jnumpy.max(rdm1_err)

            print(f"\nLoss Function = {res.fun:6.4e}, Error Mean: {err_mean:6.4e}, Max: {err_max:6.4e}, Count: {count}", file=log)
            print(f"Success = {res.lowest_optimization_result.success}", file=log)
            print(f"Message = {res.lowest_optimization_result.message}", file=log)
            print(f"x = " + " ".join([f"{xi:6.4f}" for xi in x]), file=log)
            
            print(res, file=log)

            print_matrix(rdm1_fit,   t="rdm1_fit = ", stdout=log)
            print_matrix(rdm1_tag,   t="rdm1_tag = ", stdout=log)
            print("\n\n" + "#"*20, file=log)#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Junjies-MacBook-Air.local', release='22.5.0', version='Darwin Kernel Version 22.5.0: Thu Jun  8 22:21:34 PDT 2023; root:xnu-8796.121.3~7/RELEASE_ARM64_T8112', machine='arm64')  Threads 1
Python 3.11.3 | packaged by conda-forge | (main, Apr  6 2023, 08:58:31) [Clang 14.0.6 ]
numpy 1.24.3  scipy 1.10.1
Date: Fri Jul 21 17:29:02 2023
PySCF version 2.2.1
PySCF path  /Users/yangjunjie/packages/pyscf/pyscf-2.2.1/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 4
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         0.41


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-06
SCF conv_tol_grad = None
SCF max_cycles = 200
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/14/127wb84x5yx1jh4dxrvgcfkm0000gn/T/tmp2zc6ijxz
max_memory 4000 MB (current use 0 MB)
Overwritten attributes  get_ovlp get_hcore  of <class 'pyscf.scf.hf.RHF'>
Set gradient conv threshold to 0.001
init E= 12

WARN: HOMO 3 == LUMO 3

cycle= 1 E= -7.105427357601e-15  delta_E=  -12  |g|= 2.67  |ddm|= 2.45
  HOMO = 0.999999999999999  LUMO = 2
cycle= 2 E= 1.35383264676815  delta_E= 1.35  |g|= 3.56  |ddm|= 2.91
  HOMO = 1.6117292864413  LUMO = 1.71975866669825
cycle= 3 E= 0.209509019835217  delta_E= -1.14  |g|= 3.25  |ddm|= 2.92
  HOMO = 1.31242123853858  LUMO = 1.92922797861886
cycle= 4 E= 0.735539270034716  delta_E= 0.526  |g|= 3.09  |ddm|= 2.87
  HOMO = 1.46137120684098  LUMO = 1.84211930887502
cycle= 5 E= 0.413211337522232  delta_E= -0.322  |g|=  2.7  |ddm|= 0.157
  HOMO = 1.65105872909585  LUMO = 1.68211135866816
cycle= 6 E= 0.0281350574999211  delta_E= -0.385  |g|= 1.96  |ddm|= 0.232
  HOMO = 1.47889710500876  LUMO = 1.8363680680747
cycle= 7 E= 0.810279087797213  delta_E= 0.782  |g|= 4.51  |ddm|= 2.84
  HOMO = 1.64856531823167  LUMO = 1.68455594386758
cycle= 8 E= 0.0659720525861873  delta_E= -0.744  |g|= 2.87  |ddm|= 0.285
  HOMO = 1.64950982465169  LUMO = 1.6836327023161
cycle= 9 E= 0.0624517701422418  delta_E= -0.00352  |g|= 2.85  |ddm|= 0.00174
  HOMO = 1.39131879164854  LUMO = 1.90680279486257
cycle= 10 E= 1.25958395730635  delta_E=  1.2  |g|= 5.23  |ddm|= 0.417
  HOMO = 1.52947618489501  LUMO = 1.79076821044191
cycle= 11 E= 0.268336357216699  delta_E= -0.991  |g|= 2.46  |ddm|= 2.87
  HOMO = 1.57025698568251  LUMO = 1.75668810362353
cycle= 12 E= 0.184358908252942  delta_E= -0.084  |g|= 2.31  |ddm|= 0.0498
  HOMO = 1.4358010759634  LUMO = 1.85955800879827
cycle= 13 E= 0.468481469543781  delta_E= 0.284  |g|= 2.77  |ddm|= 0.158
  HOMO = 1.47630643953873  LUMO = 1.83146468251319
cycle= 14 E= 0.381091966099806  delta_E= -0.0874  |g|= 2.65  |ddm|= 0.0456
  HOMO = 1.28990009625921  LUMO = 1.93933652617783
cycle= 15 E= 0.783628835636462  delta_E= 0.403  |g|= 3.14  |ddm|= 0.196
  HOMO = 1.44772291728065  LUMO = 1.85155397101638
cycle= 16 E= 0.442676257529501  delta_E= -0.341  |g|= 2.74  |ddm|= 0.163
  HOMO = 1.49358967531776  LUMO = 1.81870709190707
cycle= 17 E= 0.344129984509101  delta_E= -0.0985  |g|= 2.59  |ddm|= 0.0523
  HOMO = 1.40286208198983  LUMO = 1.8977492254938
cycle= 18 E= 1.1984885406919  delta_E= 0.854  |g|= 5.14  |ddm|= 2.88
  HOMO = 1.40286434726329  LUMO = 1.89774744247108
cycle= 19 E= 1.19847660193099  delta_E= -1.19e-05  |g|= 5.14  |ddm|= 3.3e-06
  HOMO = 1.40385486729445  LUMO = 1.89696755160895
cycle= 20 E= 1.19325816184914  delta_E= -0.00522  |g|= 5.13  |ddm|= 0.00144
  HOMO = 1.44835435146191  LUMO = 1.86141060362396
cycle= 21 E= 0.963041810376098  delta_E= -0.23  |g|= 4.77  |ddm|= 0.0659
  HOMO = 1.50338436176932  LUMO = 1.81587332232028
cycle= 22 E= 0.691270381695432  delta_E= -0.272  |g|= 4.29  |ddm|= 0.085
  HOMO = 1.65448506322936  LUMO = 1.67875130484807
cycle= 23 E= 0.0440479105139016  delta_E= -0.647  |g|=  2.8  |ddm|= 0.258
  HOMO = 1.14574555059842  LUMO = 1.98519253598543
cycle= 24 E= 1.08025148831767  delta_E= 1.04  |g|= 3.39  |ddm|= 2.89
  HOMO = 1.21515354394071  LUMO = 1.96714271497371
cycle= 25 E= 0.940193155944093  delta_E= -0.14  |g|= 3.28  |ddm|= 0.0593
  HOMO = 1.18217143871679  LUMO = 1.97663905696281
cycle= 26 E= 1.00745952528349  delta_E= 0.0673  |g|= 3.34  |ddm|= 0.0287
  HOMO = 1.18675273663808  LUMO = 1.97542021829524
cycle= 27 E= 0.998190628240722  delta_E= -0.00927  |g|= 3.33  |ddm|= 0.00393
  HOMO = 1.19508109320397  LUMO = 1.97312192003623
cycle= 28 E= 0.981277944317735  delta_E= -0.0169  |g|= 3.32  |ddm|= 0.00719
  HOMO = 1.2197570256163  LUMO = 1.96568333487779
cycle= 29 E= 0.930708318974585  delta_E= -0.0506  |g|= 3.28  |ddm|= 0.0217
  HOMO = 1.44858325479177  LUMO = 1.85096779099239
cycle= 30 E= 0.440816229126467  delta_E= -0.49  |g|= 2.74  |ddm|= 0.229
  HOMO = 1.63467089733221  LUMO = 1.69801423582726
cycle= 31 E= 0.118709816068136  delta_E= -0.322  |g|= 3.01  |ddm|= 2.85
  HOMO = 1.63485947699727  LUMO = 1.69783308622917
cycle= 32 E= 0.117982330475594  delta_E= -0.000727  |g|= 3.01  |ddm|= 0.000341
  HOMO = 1.58865152273495  LUMO = 1.74108347758886
cycle= 33 E= 0.305195700082401  delta_E= 0.187  |g|= 3.49  |ddm|= 0.0815
  HOMO = 1.43834876829114  LUMO = 1.85786618440462
cycle= 34 E= 0.462962528503014  delta_E= 0.158  |g|= 2.77  |ddm|= 2.85
  HOMO = 1.46616321478137  LUMO = 1.83873825720575
cycle= 35 E= 0.402890088211318  delta_E= -0.0601  |g|= 2.68  |ddm|= 0.0312
  HOMO = 1.54922983611532  LUMO = 1.77638097957812
cycle= 36 E= 0.477774138792127  delta_E= 0.0749  |g|= 3.87  |ddm|= 2.86
  HOMO = 1.55675082097658  LUMO = 1.76974891865107
cycle= 37 E= 0.444015693074794  delta_E= -0.0338  |g|=  3.8  |ddm|= 0.0125
  HOMO = 1.27731857070151  LUMO = 1.94463336284039
cycle= 38 E= 0.810331697445347  delta_E= 0.366  |g|= 3.17  |ddm|= 2.89
  HOMO = 1.29930802665556  LUMO = 1.9352117621689
cycle= 39 E= 0.763582979476314  delta_E= -0.0467  |g|= 3.12  |ddm|= 0.021
  HOMO = 1.37433714518866  LUMO = 1.89728102091469
cycle= 40 E= 0.601905350554953  delta_E= -0.162  |g|= 2.95  |ddm|= 0.0753
  HOMO = 1.48964069385648  LUMO = 1.82166230764498
cycle= 41 E= 0.3525529954568  delta_E= -0.249  |g|=  2.6  |ddm|= 0.127
  HOMO = 1.49367287788432  LUMO = 1.82404811992176
cycle= 42 E= 0.738079739333658  delta_E= 0.386  |g|= 4.38  |ddm|= 2.86
  HOMO = 1.52119903824695  LUMO = 1.80070986961023
cycle= 43 E= 0.606797584102343  delta_E= -0.131  |g|= 4.13  |ddm|= 0.0437
  HOMO = 1.04485113662901  LUMO = 1.99863918970278
cycle= 44 E= 1.27279729155508  delta_E= 0.666  |g|= 3.51  |ddm|= 2.94
  HOMO = 1.19865465907319  LUMO = 1.97210300926483
cycle= 45 E= 0.973996515331345  delta_E= -0.299  |g|= 3.31  |ddm|= 0.124
  HOMO = 1.58553593383928  LUMO = 1.7432942470642
cycle= 46 E= 0.153653912225507  delta_E= -0.82  |g|= 2.24  |ddm|= 0.409
  HOMO = 1.60233343015559  LUMO = 1.72850417139546
cycle= 47 E= 0.247960634926703  delta_E= 0.0943  |g|= 3.35  |ddm|= 2.83
  HOMO = 1.38328544707777  LUMO = 1.89216017482858
cycle= 48 E= 0.582485106168291  delta_E= 0.335  |g|= 2.92  |ddm|= 2.86
  HOMO = 1.278405687742  LUMO = 1.94418558121913
cycle= 49 E= 0.808029388368897  delta_E= 0.226  |g|= 3.17  |ddm|= 0.105
  HOMO = 0.90800229432618  LUMO = 1.99453515414431
cycle= 50 E= 1.51098763660212  delta_E= 0.703  |g|= 3.62  |ddm|= 0.29
  HOMO = 1.4383218134124  LUMO = 1.86951912556118
cycle= 51 E= 1.01419112356912  delta_E= -0.497  |g|= 4.85  |ddm|=    3
  HOMO = 1.51836179279464  LUMO = 1.80313982560929
cycle= 52 E= 0.620126886945281  delta_E= -0.394  |g|= 4.16  |ddm|= 0.124
  HOMO = 1.53069059591185  LUMO = 1.78978887763008
cycle= 53 E= 0.265798804359169  delta_E= -0.354  |g|= 2.46  |ddm|= 2.85
  HOMO = 1.34117790866134  LUMO = 1.91514853145546
cycle= 54 E= 0.673681353131359  delta_E= 0.408  |g|= 3.03  |ddm|= 0.209
  HOMO = 1.31243549122276  LUMO = 1.92922132610214
cycle= 55 E= 0.735508728405138  delta_E= 0.0618  |g|= 3.09  |ddm|= 0.0286
  HOMO = 1.58507273190538  LUMO = 1.74434454298962
cycle= 56 E= 0.320402437378381  delta_E= -0.415  |g|= 3.52  |ddm|= 2.87
  HOMO = 1.42337826147891  LUMO = 1.86766200301011
cycle= 57 E= 0.495419251493885  delta_E= 0.175  |g|= 2.81  |ddm|= 2.86
  HOMO = 1.48638822388414  LUMO = 1.83013944422984
cycle= 58 E= 0.773530035558974  delta_E= 0.278  |g|= 4.44  |ddm|= 2.88
  HOMO = 1.59735595075794  LUMO = 1.73310144104517
cycle= 59 E= 0.268615068356491  delta_E= -0.505  |g|=  3.4  |ddm|= 0.182
  HOMO = 1.10099387418999  LUMO = 2.1180546539018
cycle= 60 E= 2.90749222960317  delta_E= 2.64  |g|= 7.09  |ddm|= 0.698
  HOMO = 1.28740065742681  LUMO = 1.9856952109303
cycle= 61 E= 1.82956547482332  delta_E= -1.08  |g|= 5.98  |ddm|= 0.234
  HOMO = 1.45252294574515  LUMO = 1.84826882571123
cycle= 62 E= 0.432303021274912  delta_E= -1.4  |g|= 2.72  |ddm|= 2.92
  HOMO = 1.31834233551416  LUMO = 1.92643650926565
cycle= 63 E= 0.72284028371122  delta_E= 0.291  |g|= 3.08  |ddm|= 0.141
  HOMO = 1.3349735752917  LUMO = 1.91829750980285
cycle= 64 E= 0.687064028237872  delta_E= -0.0358  |g|= 3.04  |ddm|= 0.0165
  HOMO = 1.31054561638629  LUMO = 1.93010060482013
cycle= 65 E= 0.739557382540347  delta_E= 0.0525  |g|=  3.1  |ddm|= 0.0242
  HOMO = 1.35859812635434  LUMO = 1.90597969291628
cycle= 66 E= 0.636019147895683  delta_E= -0.104  |g|= 2.99  |ddm|= 0.0481
  HOMO = 1.211387600982  LUMO = 1.96831208662325
cycle= 67 E= 0.947935387754254  delta_E= 0.312  |g|= 3.29  |ddm|= 0.14
  HOMO = 1.33749503224565  LUMO = 1.94821662794911
cycle= 68 E= 1.55072126224403  delta_E= 0.603  |g|= 5.63  |ddm|= 2.97
  HOMO = 1.44850011770932  LUMO = 1.86129238423771
cycle= 69 E= 0.962302133349398  delta_E= -0.588  |g|= 4.77  |ddm|= 0.16
  HOMO = 1.38723332462295  LUMO = 1.90999185864198
cycle= 70 E= 1.28132856267959  delta_E= 0.319  |g|= 5.26  |ddm|= 0.0902
  HOMO = 1.39506406167298  LUMO = 1.90387235584633
cycle= 71 E= 1.23970534238222  delta_E= -0.0416  |g|=  5.2  |ddm|= 0.0113
  HOMO = 1.35224063610957  LUMO = 1.90938175357895
cycle= 72 E= 0.649777423076787  delta_E= -0.59  |g|=    3  |ddm|= 2.91
  HOMO = 1.52421905769409  LUMO = 1.79498227928653
cycle= 73 E= 0.279344134565904  delta_E= -0.37  |g|= 2.48  |ddm|= 0.19
  HOMO = 1.17524738314024  LUMO = 1.97842016015608
cycle= 74 E= 1.02142100837639  delta_E= 0.742  |g|= 3.35  |ddm|= 0.355
  HOMO = 1.22784829966573  LUMO = 1.96303824597858
cycle= 75 E= 0.913982930068817  delta_E= -0.107  |g|= 3.26  |ddm|= 0.0459
  HOMO = 1.13548340517948  LUMO = 1.98724083841199
cycle= 76 E= 1.10045850905603  delta_E= 0.186  |g|= 3.41  |ddm|= 0.079
  HOMO = 1.15162001858539  LUMO = 2.08306120180261
cycle= 77 E= 2.61087284055689  delta_E= 1.51  |g|= 6.82  |ddm|= 3.05
  HOMO = 1.63770034131319  LUMO = 1.69509924057521
cycle= 78 E= 0.107062936210894  delta_E= -2.5  |g|= 2.98  |ddm|= 0.708
  HOMO = 1.63122905401996  LUMO = 1.70131339800412
cycle= 79 E= 0.132043475062689  delta_E= 0.025  |g|= 3.05  |ddm|= 0.0117
  HOMO = 1.55044031789727  LUMO = 1.77531673828213
cycle= 80 E= 0.472316600224269  delta_E= 0.34  |g|= 3.86  |ddm|= 0.139
  HOMO = 1.48213264114973  LUMO = 1.83368233314508
cycle= 81 E= 0.794372652800526  delta_E= 0.322  |g|= 4.48  |ddm|= 0.109
  HOMO = 1.2058522914557  LUMO = 1.96999087985736
cycle= 82 E= 0.959288995889128  delta_E= 0.165  |g|=  3.3  |ddm|= 2.92
  HOMO = 1.27252188294314  LUMO = 1.94658675344379
cycle= 83 E= 0.820480519988905  delta_E= -0.139  |g|= 3.18  |ddm|= 0.0606
  HOMO = 0.990716205176368  LUMO = 1.99994249943971
cycle= 84 E= 1.37025087993282  delta_E= 0.55  |g|= 3.56  |ddm|= 0.229
  HOMO = 1.33938367495622  LUMO = 1.91606552427112
cycle= 85 E= 0.677554295484598  delta_E= -0.693  |g|= 3.03  |ddm|= 0.294
  HOMO = 1.63167294348438  LUMO = 1.70083462039958
cycle= 86 E= 0.0641040594909903  delta_E= -0.613  |g|= 2.05  |ddm|= 0.337
  HOMO = 1.64352046404359  LUMO = 1.68946891909756
cycle= 87 E= 0.0849007688779952  delta_E= 0.0208  |g|= 2.92  |ddm|= 2.83
  HOMO = 1.53812454789558  LUMO = 1.783746115409
cycle= 88 E= 0.250311708655554  delta_E= 0.165  |g|= 2.43  |ddm|= 2.84
  HOMO = 1.52444397760708  LUMO = 1.79792363963254
cycle= 89 E= 0.591611763419987  delta_E= 0.341  |g|=  4.1  |ddm|= 2.85
  HOMO = 1.5245415738491  LUMO = 1.79783972062761
cycle= 90 E= 0.591156154535818  delta_E= -0.000456  |g|=  4.1  |ddm|= 0.00027
  HOMO = 1.57070965657914  LUMO = 1.75630684736526
cycle= 91 E= 0.184078272579558  delta_E= -0.407  |g|= 2.31  |ddm|= 2.84
  HOMO = 1.47430149764792  LUMO = 1.84017397418865
cycle= 92 E= 0.83299586624512  delta_E= 0.649  |g|= 4.55  |ddm|= 2.85
  HOMO = 1.25788498815688  LUMO = 2.00735336063896
cycle= 93 E= 1.99665114151832  delta_E= 1.16  |g|= 6.17  |ddm|= 0.307
  HOMO = 1.64111840935653  LUMO = 1.69180787884578
cycle= 94 E= 0.093357186108233  delta_E= -1.9  |g|= 2.93  |ddm|= 0.593
  HOMO = 1.21155146495655  LUMO = 1.96826171914534
cycle= 95 E= 0.947599965584215  delta_E= 0.854  |g|= 3.29  |ddm|= 2.88
  HOMO = 1.48973355613236  LUMO = 1.82734537035306
cycle= 96 E= 0.757235915595435  delta_E= -0.19  |g|= 4.41  |ddm|= 2.92
  HOMO = 0.847841851477103  LUMO = 1.98537072214692
cycle= 97 E= 1.60740710656692  delta_E= 0.85  |g|= 3.66  |ddm|= 2.99
  HOMO = 1.00285190944455  LUMO = 2.00001954766309
cycle= 98 E= 1.34921503416614  delta_E= -0.258  |g|= 3.55  |ddm|= 0.103
  HOMO = 1.1735785474855  LUMO = 1.97882349994905
cycle= 99 E= 1.02533833790736  delta_E= -0.324  |g|= 3.35  |ddm|= 0.138
  HOMO = 0.963826863709501  LUMO = 1.99920329188727
cycle= 100 E= 1.41800572547281  delta_E= 0.393  |g|= 3.59  |ddm|= 0.166
  HOMO = 1.20741806554148  LUMO = 1.96954598372004
cycle= 101 E= 0.956832278207416  delta_E= -0.461  |g|=  3.3  |ddm|= 0.195
  HOMO = 1.2225431002199  LUMO = 1.96478677817418
cycle= 102 E= 0.92525950047041  delta_E= -0.0316  |g|= 3.27  |ddm|= 0.0191
  HOMO = 1.21165536331638  LUMO = 1.96822931741941
cycle= 103 E= 0.947397874350719  delta_E= 0.0221  |g|= 3.29  |ddm|= 0.0167
  HOMO = 1.20924190985297  LUMO = 1.96896811279456
cycle= 104 E= 0.95235197638346  delta_E= 0.00495  |g|= 3.29  |ddm|= 0.00214
  HOMO = 1.61467888574931  LUMO = 1.71682347890574
cycle= 105 E= 0.0964936238159693  delta_E= -0.856  |g|= 2.12  |ddm|= 0.437
  HOMO = 1.48567648755609  LUMO = 1.83073301061995
cycle= 106 E= 0.777009488065793  delta_E= 0.681  |g|= 4.45  |ddm|= 2.84
  HOMO = 1.50508890445462  LUMO = 1.81443401915037
cycle= 107 E= 0.683132626745793  delta_E= -0.0939  |g|= 4.28  |ddm|= 0.0306
  HOMO = 1.40167247840538  LUMO = 1.89870323469968
cycle= 108 E= 1.20495126153494  delta_E= 0.522  |g|= 5.15  |ddm|= 0.157
  HOMO = 1.49781904101977  LUMO = 1.82059513617511
cycle= 109 E= 0.718249233254373  delta_E= -0.487  |g|= 4.34  |ddm|= 0.147
  HOMO = 1.50607508579718  LUMO = 1.80921272343401
cycle= 110 E= 0.317646707509335  delta_E= -0.401  |g|= 2.55  |ddm|= 2.86
  HOMO = 1.16542063205661  LUMO = 1.98081778537539
cycle= 111 E= 1.04114944282348  delta_E= 0.724  |g|= 3.36  |ddm|= 0.341
  HOMO = 1.28587916197182  LUMO = 1.94102407124206
cycle= 112 E= 0.792159392667017  delta_E= -0.249  |g|= 3.15  |ddm|= 0.108
  HOMO = 1.23882750178784  LUMO = 1.95926480014936
cycle= 113 E= 0.891195155154423  delta_E= 0.099  |g|= 3.24  |ddm|= 0.044
  HOMO = 0.969682893212893  LUMO = 1.99938811249472
cycle= 114 E= 1.40707546462788  delta_E= 0.516  |g|= 3.58  |ddm|= 0.213
  HOMO = 1.49345835919953  LUMO = 1.8242999521089
cycle= 115 E= 0.739736052895764  delta_E= -0.667  |g|= 4.38  |ddm|= 2.97
  HOMO = 1.22058926076548  LUMO = 2.03431767303068
cycle= 116 E= 2.21032297104165  delta_E= 1.47  |g|= 6.41  |ddm|= 0.384
  HOMO = 1.39009138148811  LUMO = 1.90779093774823
cycle= 117 E= 1.26594257311192  delta_E= -0.944  |g|= 5.23  |ddm|= 0.231
  HOMO = 1.29129797026526  LUMO = 1.98282138285098
cycle= 118 E= 1.80755485452061  delta_E= 0.542  |g|= 5.95  |ddm|= 0.139
  HOMO = 1.65686556317136  LUMO = 1.67716163507071
cycle= 119 E= 0.0649677520805474  delta_E= -1.74  |g|= 2.78  |ddm|= 0.663
  HOMO = 1.28950203715239  LUMO = 1.93980376989482
cycle= 120 E= 0.791454064817963  delta_E= 0.726  |g|= 3.17  |ddm|= 2.85
  HOMO = 1.32449938443721  LUMO = 1.9237966354644
cycle= 121 E= 0.717813166750148  delta_E= -0.0736  |g|=  3.1  |ddm|= 0.0383
  HOMO = 0.97178769229195  LUMO = 2.00059415173473
cycle= 122 E= 1.42112300051193  delta_E= 0.703  |g|= 3.64  |ddm|= 0.311
  HOMO = 1.02104686423133  LUMO = 1.99983314091913
cycle= 123 E= 1.32693647218314  delta_E= -0.0942  |g|= 3.58  |ddm|= 0.0485
  HOMO = 1.35046701213659  LUMO = 1.91214677798259
cycle= 124 E= 0.784939209401132  delta_E= -0.542  |g|= 3.53  |ddm|= 0.602
  HOMO = 1.61857102188358  LUMO = 1.72164434946394
cycle= 125 E= 0.509712708529526  delta_E= -0.275  |g|= 3.24  |ddm|= 1.91
  HOMO = 1.49711963938867  LUMO = 1.82061859594695
cycle= 126 E= 0.709221288109249  delta_E=  0.2  |g|= 4.28  |ddm|= 2.52
  HOMO = 1.51154347467562  LUMO = 1.8084378868941
cycle= 127 E= 0.650535428156985  delta_E= -0.0587  |g|= 4.19  |ddm|= 0.0798
  HOMO = 1.51211906991985  LUMO = 1.80846242681849
cycle= 128 E= 0.605663785574733  delta_E= -0.0449  |g|= 4.02  |ddm|= 0.239
  HOMO = 1.63490686648792  LUMO = 1.70956741746233
cycle= 129 E= 0.138289521875284  delta_E= -0.467  |g|= 2.17  |ddm|= 1.19
  HOMO = 1.55903635882272  LUMO = 1.76916554594701
cycle= 130 E= 0.360269369062904  delta_E= 0.222  |g|= 3.23  |ddm|= 2.73
  HOMO = 1.63822906745189  LUMO = 1.69445498524346
cycle= 131 E= 0.0735108394884998  delta_E= -0.287  |g|=  2.4  |ddm|= 1.33
  HOMO = 1.5560766439016  LUMO = 1.77235544945217
cycle= 132 E= 0.281272633456769  delta_E= 0.208  |g|= 2.74  |ddm|= 2.79
  HOMO = 1.65047749644454  LUMO = 1.68456231770251
cycle= 133 E= 0.0886820425826986  delta_E= -0.193  |g|= 2.21  |ddm|= 0.65
  HOMO = 1.64750353302785  LUMO = 1.68774719078817
cycle= 134 E= 0.0909563073626467  delta_E= 0.00227  |g|= 2.17  |ddm|= 0.262
  HOMO = 1.64679126481485  LUMO = 1.6885366760416
cycle= 135 E= 0.0919184085382891  delta_E= 0.000962  |g|= 2.24  |ddm|= 0.274
  HOMO = 1.63273943452083  LUMO = 1.70370237694854
cycle= 136 E= 0.19107966101675  delta_E= 0.0992  |g|= 3.13  |ddm|= 1.25
  HOMO = 1.64664633770286  LUMO = 1.68735892703935
cycle= 137 E= 0.0727650584896065  delta_E= -0.118  |g|= 2.63  |ddm|= 0.699
  HOMO = 1.58369367248344  LUMO = 1.74746747980196
cycle= 138 E= 0.173107836140073  delta_E=  0.1  |g|= 2.29  |ddm|= 1.89
  HOMO = 1.64956032813193  LUMO = 1.68454185137943
cycle= 139 E= 0.0685492818346569  delta_E= -0.105  |g|= 2.77  |ddm|=  1.1
  HOMO = 1.52551086962267  LUMO = 1.79856109478085
cycle= 140 E= 0.578228235206878  delta_E= 0.51  |g|= 3.97  |ddm|= 2.46
  HOMO = 1.61963577325332  LUMO = 1.71300204939619
cycle= 141 E= 0.165306515494862  delta_E= -0.413  |g|= 2.88  |ddm|= 0.965
  HOMO = 1.60101074434386  LUMO = 1.73116016083732
cycle= 142 E= 0.242673865103233  delta_E= 0.0774  |g|= 3.14  |ddm|= 1.01
  HOMO = 1.59657712899024  LUMO = 1.7395593276343
cycle= 143 E= 0.263381801574604  delta_E= 0.0207  |g|= 3.09  |ddm|= 1.81
  HOMO = 1.64841246144768  LUMO = 1.68494242223152
cycle= 144 E= 0.0365896736220943  delta_E= -0.227  |g|= 2.02  |ddm|= 0.751
  HOMO = 1.65871418703385  LUMO = 1.67550319911702
cycle= 145 E= 0.0211203502371795  delta_E= -0.0155  |g|= 1.95  |ddm|=  2.4
  HOMO = 1.65709773283317  LUMO = 1.67681924916846
cycle= 146 E= 0.0262831611903218  delta_E= 0.00516  |g|= 2.15  |ddm|=  2.6
  HOMO = 1.65312704580494  LUMO = 1.68018849261652
cycle= 147 E= 0.034195544709811  delta_E= 0.00791  |g|= 2.31  |ddm|=  2.8
  HOMO = 1.65364874030707  LUMO = 1.6797896103276
cycle= 148 E= 0.0329003369812133  delta_E= -0.0013  |g|= 2.19  |ddm|= 0.151
  HOMO = 1.65698182920891  LUMO = 1.67649865182506
cycle= 149 E= 0.037798401627656  delta_E= 0.0049  |g|= 2.77  |ddm|= 0.967
  HOMO = 1.66086220772354  LUMO = 1.67259727399764
cycle= 150 E= 0.0137982242041153  delta_E= -0.024  |g|= 2.01  |ddm|= 1.18
  HOMO = 1.66361208669739  LUMO = 1.66973491550394
cycle= 151 E= 0.0104686080189964  delta_E= -0.00333  |g|=  2.6  |ddm|= 1.34
  HOMO = 1.66422536171761  LUMO = 1.66921577485747
cycle= 152 E= 0.00934084663985413  delta_E= -0.00113  |g|=  2.6  |ddm|= 0.735
  HOMO = 1.66492372362217  LUMO = 1.66840924280833
cycle= 153 E= 0.00565571255341091  delta_E= -0.00369  |g|= 1.95  |ddm|= 1.55
  HOMO = 1.66517121474824  LUMO = 1.66820027893201
cycle= 154 E= 0.00403708265177194  delta_E= -0.00162  |g|= 2.08  |ddm|= 2.71
  HOMO = 1.66159006559605  LUMO = 1.67180881364539
cycle= 155 E= 0.0178610670911592  delta_E= 0.0138  |g|= 2.65  |ddm|= 2.83
  HOMO = 1.6623784378456  LUMO = 1.67098310868504
cycle= 156 E= 0.0165459056575665  delta_E= -0.00132  |g|= 2.71  |ddm|= 0.422
  HOMO = 1.66548592390311  LUMO = 1.66794494828908
cycle= 157 E= 0.0046726651995197  delta_E= -0.0119  |g|= 1.95  |ddm|= 2.83
  HOMO = 1.66399576781226  LUMO = 1.66961006278033
cycle= 158 E= 0.0132637750801505  delta_E= 0.00859  |g|= 2.54  |ddm|= 1.18
  HOMO = 1.6598384994877  LUMO = 1.67346999299751
cycle= 159 E= 0.0134397364828365  delta_E= 0.000176  |g|= 2.01  |ddm|= 0.704
  HOMO = 1.64537501783326  LUMO = 1.68812808619244
cycle= 160 E= 0.0740020763919764  delta_E= 0.0606  |g|= 2.68  |ddm|= 2.82
  HOMO = 1.63844281388868  LUMO = 1.69469110335362
cycle= 161 E= 0.0993854695119731  delta_E= 0.0254  |g|= 2.84  |ddm|= 0.139
  HOMO = 1.62836429441211  LUMO = 1.70453199465862
cycle= 162 E= 0.134524484199563  delta_E= 0.0351  |g|=  2.9  |ddm|= 0.0653
  HOMO = 1.50905125920093  LUMO = 1.80737281581647
cycle= 163 E= 0.331209188168053  delta_E= 0.197  |g|= 2.65  |ddm|= 2.83
  HOMO = 1.51812921749106  LUMO = 1.79981162825755
cycle= 164 E= 0.299178408015057  delta_E= -0.032  |g|= 2.54  |ddm|= 0.103
  HOMO = 1.44342557195393  LUMO = 1.85867169630836
cycle= 165 E= 0.722408734291286  delta_E= 0.423  |g|= 3.91  |ddm|= 0.639
  HOMO = 1.62552180985252  LUMO = 1.71463792643938
cycle= 166 E= 0.171555818802433  delta_E= -0.551  |g|= 2.48  |ddm|= 1.73
  HOMO = 1.63768484399506  LUMO = 1.69489907906927
cycle= 167 E= 0.0743027652073263  delta_E= -0.0973  |g|= 2.44  |ddm|= 1.77
  HOMO = 1.62894582410333  LUMO = 1.70313112869518
cycle= 168 E= 0.0990772384418941  delta_E= 0.0248  |g|= 2.52  |ddm|= 0.0353
  HOMO = 1.55399000781803  LUMO = 1.77162512667243
cycle= 169 E= 0.351285514108028  delta_E= 0.252  |g|= 3.18  |ddm|= 2.83
  HOMO = 1.52513496046852  LUMO = 1.79574730913308
cycle= 170 E= 0.420359995154969  delta_E= 0.0691  |g|= 3.22  |ddm|= 0.142
  HOMO = 1.53302818480792  LUMO = 1.78922076122071
cycle= 171 E= 0.430343988479645  delta_E= 0.00998  |g|= 3.37  |ddm|= 0.139
  HOMO = 1.5741539113859  LUMO = 1.75338492704868
cycle= 172 E= 0.278697797335192  delta_E= -0.152  |g|= 2.99  |ddm|= 2.84
  HOMO = 1.55026095760108  LUMO = 1.7727066590069
cycle= 173 E= 0.266884889873431  delta_E= -0.0118  |g|= 2.66  |ddm|= 2.81
  HOMO = 1.6050799403816  LUMO = 1.7189780783293
cycle= 174 E= 0.202476658442889  delta_E= -0.0644  |g|= 2.54  |ddm|= 2.54
  HOMO = 1.50705481091001  LUMO = 1.81356045326403
cycle= 175 E= 0.595607122436053  delta_E= 0.393  |g|= 3.51  |ddm|= 2.74
  HOMO = 1.63500814728285  LUMO = 1.69756891618781
cycle= 176 E= 0.0631999431754675  delta_E= -0.532  |g|= 2.04  |ddm|= 0.605
  HOMO = 1.6128202119002  LUMO = 1.72050121209151
cycle= 177 E= 0.195323028769332  delta_E= 0.132  |g|= 2.52  |ddm|= 2.63
  HOMO = 1.65358136411968  LUMO = 1.67849863128598
cycle= 178 E= 0.0409540190337712  delta_E= -0.154  |g|= 2.51  |ddm|= 1.72
  HOMO = 1.66514968312381  LUMO = 1.66757544285829
cycle= 179 E= 0.00710496927746185  delta_E= -0.0338  |g|= 1.95  |ddm|= 2.71
  HOMO = 1.6623498692394  LUMO = 1.67128125478019
cycle= 180 E= 0.0108451649845822  delta_E= 0.00374  |g|= 2.05  |ddm|= 2.35
  HOMO = 1.65228823965137  LUMO = 1.68095299624763
cycle= 181 E= 0.0432166683599178  delta_E= 0.0324  |g|= 2.55  |ddm|= 2.82
  HOMO = 1.65858636402481  LUMO = 1.67472475751821
cycle= 182 E= 0.0312227945572499  delta_E= -0.012  |g|= 2.75  |ddm|= 0.689
  HOMO = 1.66021064898224  LUMO = 1.67296059263955
cycle= 183 E= 0.0236435696249124  delta_E= -0.00758  |g|= 2.73  |ddm|= 0.0238
  HOMO = 1.66132272580539  LUMO = 1.67218995927059
cycle= 184 E= 0.0218885714052028  delta_E= -0.00175  |g|= 2.72  |ddm|= 0.0366
  HOMO = 1.66045342774403  LUMO = 1.67283545866493
cycle= 185 E= 0.021511704440174  delta_E= -0.000377  |g|= 2.61  |ddm|= 0.492
  HOMO = 1.65952658150122  LUMO = 1.67372845852096
cycle= 186 E= 0.024449884605704  delta_E= 0.00294  |g|= 2.61  |ddm|= 0.0164
  HOMO = 1.53696519460123  LUMO = 1.78733276125298
cycle= 187 E= 0.494290001220122  delta_E= 0.47  |g|= 3.78  |ddm|= 0.212
  HOMO = 1.63519417030028  LUMO = 1.69776180252305
cycle= 188 E= 0.0603846244050121  delta_E= -0.434  |g|= 2.03  |ddm|=  2.8
  HOMO = 1.57824111553657  LUMO = 1.75033113619785
cycle= 189 E= 0.308373971716171  delta_E= 0.248  |g|= 3.33  |ddm|= 1.01
  HOMO = 1.45254804016324  LUMO = 1.84997039394044
cycle= 190 E= 0.501326328350228  delta_E= 0.193  |g|= 3.05  |ddm|= 0.712
  HOMO = 1.54209608876161  LUMO = 1.78273001214894
cycle= 191 E= 0.290134950731169  delta_E= -0.211  |g|= 2.59  |ddm|= 0.193
  HOMO = 1.60408401362937  LUMO = 1.72677107131776
cycle= 192 E= 0.156465604073786  delta_E= -0.134  |g|= 2.57  |ddm|= 0.784
  HOMO = 1.60540616778696  LUMO = 1.72541553543732
cycle= 193 E= 0.127113190899911  delta_E= -0.0294  |g|=  2.3  |ddm|= 0.278
  HOMO = 1.62217953161766  LUMO = 1.71004795044353
cycle= 194 E= 0.167008492172453  delta_E= 0.0399  |g|= 3.13  |ddm|= 1.54
  HOMO = 1.59785626178093  LUMO = 1.73269408293941
cycle= 195 E= 0.225862218614542  delta_E= 0.0589  |g|= 3.08  |ddm|= 2.73
  HOMO = 1.63133479798798  LUMO = 1.70125598467185
cycle= 196 E= 0.119646405517901  delta_E= -0.106  |g|= 2.86  |ddm|= 0.156
  HOMO = 1.62222255261346  LUMO = 1.70982967546922
cycle= 197 E= 0.137538537066368  delta_E= 0.0179  |g|= 2.82  |ddm|= 0.165
  HOMO = 1.60682525511544  LUMO = 1.72468732941981
cycle= 198 E= 0.20859399804329  delta_E= 0.0711  |g|= 3.09  |ddm|= 0.16
  HOMO = 1.62542141685987  LUMO = 1.71299811058467
cycle= 199 E= 0.190599676727217  delta_E= -0.018  |g|= 3.06  |ddm|= 0.842
  HOMO = 1.66193258777967  LUMO = 1.67180941103741
cycle= 200 E= 0.0231084655823803  delta_E= -0.167  |g|= 2.69  |ddm|= 0.276
SCF not converged.
SCF energy = 0.0231084655823803
#INFO: **** input file is /Users/yangjunjie/work/hub-bs-dmet/fitting.py ****
import os, sys, typing
from typing import List, Tuple, Callable
sys.path.append(".")

from functools import reduce

import numpy, scipy
from scipy import linalg
from scipy.optimize import basinhopping

import jax
import jax.numpy as jnumpy
from jax.scipy.linalg import eigh
from jax.scipy.optimize import minimize

from pyscf import lib

class LossFunctionMixin(lib.StreamObject):
    spin   = None

    def __init__(self, h1e: numpy.ndarray, rdm1_tag: numpy.ndarray, fit_inds: numpy.ndarray,
                 nelecs: Tuple[int, int], loss_func_type: int = 1, stdout: typing.TextIO = sys.stdout):
        self.stdout = stdout

        spin = self.spin
        assert spin is not None

        # Convert fit_inds to a JAX array and extract dimensions
        fit_inds = jnumpy.asarray(fit_inds)
        nfrag    = fit_inds.shape[0]
        nimp     = fit_inds.shape[1]
        nsite    = nimp * nfrag

        ind_triu = jnumpy.triu_indices(nimp)
        num_triu = ind_triu[0].shape[0]
        num_parm = num_triu * spin
        
        # Ensure that dimensions of f1e and rdm1_tag match expected dimensions
        assert h1e.shape      == (nsite, nsite)
        assert rdm1_tag.shape == (nsite, nsite)

        self.h1e = h1e
        self.rdm1_tag = rdm1_tag
        self.fit_inds = fit_inds
        self.nelecs = nelecs
        self.loss_func_type = loss_func_type

        self.ind_triu = ind_triu
        self.num_triu = num_triu
        self.num_parm = num_parm

        self.nfrag    = nfrag
        self.nimp     = nimp
        self.nsite    = nsite

        h1es = jnumpy.zeros((spin, nsite, nsite))
        h1es = h1es.at[0].set(h1e)
        h1es = h1es.at[-1].set(h1e)
        self.h1es = h1es

        get_v1es = self._gen_get_v1es()
        get_rdm1 = self._gen_get_rdm1()

        # Helper functions
        self._get_v1es = self._gen_get_v1es()
        self._get_rdm1 = self._gen_get_rdm1()
        
        # If the number of fragments is 1, then all the
        # types of loss functions are equivalent.
        assert loss_func_type == 1 or nfrag != 1

        if loss_func_type == 1:
            def func(xs):
                # Fill the correlation potential and calculate f1e
                v1es_fit = get_v1es(xs)
                f1es_fit = h1es + v1es_fit
                # Obtain the total RDM
                rdm1_fit = get_rdm1(f1es_fit)[0]
                # Calculate the difference between the target and fitted RDMs
                rdm1_err = rdm1_tag - rdm1_fit
                
                # The loss function is the norm of the RDM difference
                err = jnumpy.linalg.norm(rdm1_err)
                return err

        elif loss_func_type == 2:
            def func(xs):
                # Fill the correlation potential and calculate f1e
                v1es_fit = get_v1es(xs)
                f1es_fit = h1es + v1es_fit
                # Obtain the total RDM
                rdm1_fit = get_rdm1(f1es_fit)[0]
                # Calculate the difference between the target and fitted RDMs
                rdm1_err = rdm1_tag - rdm1_fit

                # The loss function is the sum of the norms of the RDM differences for each fragment
                err = sum([jnumpy.linalg.norm(rdm1_err[fit_ind][:, fit_ind]) for fit_ind in fit_inds])
                return err

        elif loss_func_type == 3:
            def func(xs):
                # Fill the correlation potential and calculate f1e
                v1es_fit = get_v1es(xs)
                f1es_fit = h1es + v1es_fit
                # Obtain the total RDM
                rdm1_fit = get_rdm1(f1es_fit)[0]
                # Calculate the difference between the target and fitted RDMs
                rdm1_err = rdm1_tag - rdm1_fit

                # The loss function is the sum of the norms of the RDM differences for each fragment
                err  = jnumpy.linalg.norm(rdm1_err)
                err += sum([jnumpy.linalg.norm(rdm1_err[fit_ind][:, fit_ind]) for fit_ind in fit_inds])
                return err

        else:
            raise ValueError("Invalid loss function type.")

        self.func = (lambda x: numpy.array(func(x)))
        self.grad = (lambda x: numpy.array(jax.grad(func)(x)))
        self.hess = (lambda x: numpy.array(jax.hessian(func)(x)))
        self._dump_info()

    def _dump_info(self):
        info = self.__dict__
        class_name = " " + self.__class__.__name__ + " "
        self.stdout.write("\n\n" + "#" * 20 + class_name + "#" * 20 + "\n")
        self.stdout.write("Loss Function Info:\n")
        
        for k, v in info.items():
            self.stdout.write(f"{k} = {v}\n")

        self.stdout.write("#" * (40 +  len(class_name)) + "\n")

    def _gen_get_v1es(self):
        spin     = self.spin
        nsite    = self.nsite
        nimp     = self.nimp
        nfrag    = self.nfrag

        num_triu = self.num_triu
        ind_triu = self.ind_triu
        fit_inds = self.fit_inds

        def get_v1es(xs):
            assert xs.shape == (spin * num_triu,)
            v1es = jnumpy.zeros((spin, nsite, nsite))

            for s, x in enumerate(jnumpy.split(xs, spin)):
                for fit_ind in fit_inds:
                    ind_0 = fit_ind[ind_triu[0]]
                    ind_1 = fit_ind[ind_triu[1]]
                    v1es  = v1es.at[s, ind_0, ind_1].set(x)

                v1e_sym = v1es[s] + jnumpy.transpose(v1es[s]) - jnumpy.diag(jnumpy.diag(v1es[s]))
                v1es    = v1es.at[s].set(v1e_sym)
            
            return v1es

        return get_v1es

    def _gen_get_rdm1(self, is_debug = False):
        raise NotImplementedError

class RestrictedSpinLossFunction(LossFunctionMixin):
    spin = 1
    def _gen_get_rdm1(self):
        spin     = self.spin
        nsite    = self.nsite
        nimp     = self.nimp
        nfrag    = self.nfrag

        nelec_alph, nelec_beta = self.nelecs

        num_triu = self.num_triu
        ind_triu = self.ind_triu
        fit_inds = self.fit_inds

        def get_rdm1(f1es):
            assert f1es.shape  == (spin, nsite, nsite)
            assert nelec_alpha == nelec_beta

            f1e_aa = f1e_bb = f1es[0]
            mo_ene_alph, mo_coeff_alph = eigh(f1e_aa)
            mo_ene_beta, mo_coeff_beta = mo_ene_alph, mo_coeff_alph

            occ_idx_alph = jnumpy.argsort(mo_ene_alph)[:nelec_alph]
            occ_idx_beta = jnumpy.argsort(mo_ene_beta)[:nelec_beta]

            coeff_occ_alph = mo_coeff_alph[:, occ_idx_alph]
            coeff_occ_beta = mo_coeff_beta[:, occ_idx_beta]

            rdm1_fit_alph  = jnumpy.dot(coeff_occ_alph, coeff_occ_alph.T)
            rdm1_fit_beta  = jnumpy.dot(coeff_occ_beta, coeff_occ_beta.T)

            gdm1 = jnumpy.zeros((2 * nsite, 2 * nsite))
            gdm1 = gdm1.at[:nsite, :nsite].set(rdm1_fit_alph)
            gdm1 = gdm1.at[nsite:, nsite:].set(rdm1_fit_beta)

            return rdm1_fit_alph + rdm1_fit_beta, gdm1

        return get_rdm1

class UnrestrictedSpinLossFunction(LossFunctionMixin):
    spin = 2
    def _gen_get_rdm1(self):
        spin     = self.spin
        nsite    = self.nsite
        nimp     = self.nimp
        nfrag    = self.nfrag

        nelec_alph, nelec_beta = self.nelecs

        num_triu = self.num_triu
        ind_triu = self.ind_triu
        fit_inds = self.fit_inds

        def get_rdm1(f1es):
            assert f1es.shape  == (spin, nsite, nsite)
            assert nelec_alpha == nelec_beta

            f1e_aa, f1e_bb = f1es
            mo_ene_alph, mo_coeff_alph = eigh(f1e_aa)
            mo_ene_beta, mo_coeff_beta = eigh(f1e_bb)

            occ_idx_alph = jnumpy.argsort(mo_ene_alph)[:nelec_alph]
            occ_idx_beta = jnumpy.argsort(mo_ene_beta)[:nelec_beta]

            coeff_occ_alph = mo_coeff_alph[:, occ_idx_alph]
            coeff_occ_beta = mo_coeff_beta[:, occ_idx_beta]

            rdm1_fit_aa  = jnumpy.dot(coeff_occ_alph, coeff_occ_alph.T)
            rdm1_fit_bb  = jnumpy.dot(coeff_occ_beta, coeff_occ_beta.T)

            gdm1_fit = jnumpy.block([[rdm1_fit_aa, jnumpy.zeros((nsite, nsite))], [jnumpy.zeros((nsite, nsite)), rdm1_fit_bb]])

            return rdm1_fit_alph + rdm1_fit_beta, gdm1_fit

        return get_rdm1

class GeneralizedSpinLossFunction(LossFunctionMixin):
    spin = 4
    def _gen_get_rdm1(self):
        spin     = self.spin
        nsite    = self.nsite
        nimp     = self.nimp
        nfrag    = self.nfrag

        nelec_alpha, nelec_beta = self.nelecs

        num_triu = self.num_triu
        ind_triu = self.ind_triu
        fit_inds = self.fit_inds

        def get_rdm1(f1es):
            assert f1es.shape  == (spin, nsite, nsite)
            assert nelec_alpha == nelec_beta

            f1e_aa, f1e_ab, f1e_ba, f1e_bb = f1es
            f1e_g = jnumpy.block([[f1e_aa, f1e_ab], [f1e_ba, f1e_bb]])

            mo_ene_g, mo_coeff_g = eigh(f1e_g)
            occ_idx_g = jnumpy.argsort(mo_ene_g)[:(nelec_alpha + nelec_beta)]

            coeff_occ_g = mo_coeff_g[:, occ_idx_g]
            gdm1_fit = jnumpy.dot(coeff_occ_g, coeff_occ_g.T)

            rdm1_fit_alph = gdm1_fit[:nsite, :nsite]
            rdm1_fit_beta = gdm1_fit[nsite:, nsite:]

            return rdm1_fit_alph + rdm1_fit_beta, gdm1_fit

        return get_rdm1

RLF = RestrictedSpinLossFunction
ULF = UnrestrictedSpinLossFunction
GLF = GeneralizedSpinLossFunction

from utils import print_matrix
from utils import RestrictedElectronicStructureProblem

from utils import solve_restricted_hartree_fock
from utils import solve_unrestricted_hartree_fock
from utils import solve_direct_spin1_full_configuration_interaction

from hub import build_hub_model
hub_u = 8.0
nsite  = 6
is_debug = True

for nelecs in [(2, 2), (3, 3), (4, 4)]:
    if is_debug and (not nelecs == (2, 2)):
        continue

    log = open(f"./log/hub-u-{hub_u:6.4f}-nelec-{nelecs[0]+nelecs[1]}" + ".log", "w")

    hub_obj         = build_hub_model(nsite, nelecs, hub_u)
    hub_obj.verbose = 4
    hub_obj.stdout  = log
    dm0_alph, dm0_beta = (lambda xs: (numpy.diag(xs[0]), numpy.diag(xs[1][::-1])))(numpy.asarray([[1, 0] for _ in range(nsite)]).reshape(2, -1))

    res_rhf = solve_restricted_hartree_fock(hub_obj,   dm0=dm0_alph+dm0_beta)
    res_uhf = solve_unrestricted_hartree_fock(hub_obj, dm0=(dm0_alph, dm0_beta))
    res_fci = solve_direct_spin1_full_configuration_interaction(hub_obj)

    ene_rhf = res_rhf.get_ene()
    ene_uhf = res_uhf.get_ene()
    ene_fci = res_fci.get_ene()

    r_rdm1_rhf = res_rhf.get_r_rdm1()
    r_rdm1_uhf = res_uhf.get_r_rdm1()
    r_rdm1_fci = res_fci.get_r_rdm1()
    rdm1_tag   = r_rdm1_fci

    for res in [res_rhf, res_uhf, res_fci]:
        ene    = res.get_ene()
        r_rdm1 = res.get_r_rdm1()
        u_rdm1 = res.get_u_rdm1()

        dm_err = numpy.abs(r_rdm1_fci - r_rdm1) 
        err_max = numpy.max(dm_err)
        err_avg = numpy.linalg.norm(dm_err) / numpy.size(dm_err)

        print(f"\n\n{res.__class__.__name__}", file=log)
        print(f"Energy: {ene:6.4f}, Error Max: {err_max:6.4e}, Avg: {err_avg:6.4e}", file=log)
        print_matrix(r_rdm1,    t="r_rdm1 = ", stdout=log)
        print_matrix(u_rdm1[0], t="u_rdm1_alph = ", stdout=log)
        print_matrix(u_rdm1[1], t="u_rdm1_beta = ", stdout=log)

    for igen_loss, LF in enumerate([RLF, ULF, GLF]):
        for (nimp, loss_func_type) in [(2, 1), (2, 2), (2, 3), (nsite, 1)]:
            if is_debug and (not (nimp == nsite and loss_func_type == 1 and igen_loss == 2)):
                continue
            
            fit_inds = numpy.asarray([[i+ifrag*nimp for i in range(nimp)] for ifrag in range(nsite // nimp)])
            kwargs   = {"stdout": log, "fit_inds": fit_inds, "nelecs": nelecs, "loss_func_type": loss_func_type}

            lf       = LF(hub_obj.h1, rdm1_tag, **kwargs)
            print("\n\n" + "#"*20, file=log)
            print(f"{lf.__class__.__name__}", file=log)
            print(f"nimp = {nimp}, nsite = {nsite}", file=log)
            print(f"nelecs = {nelecs}", file=log)
            print(f"loss_func_type = {loss_func_type}", file=log)

            x0 = numpy.zeros(lf.num_parm)

            global count, ymin
            count = 0
            ymin  = None

            def callback(x, y, accepted):
                # Fill the correlation potential and calculate f1e
                v1es_fit = lf._get_v1es(x)
                f1es_fit = lf.h1es + v1es_fit
                # Obtain the total RDM
                rdm1_fit, gdm1_fit = lf._get_rdm1(f1es_fit)
                # Calculate the difference between the target and fitted RDMs
                rdm1_err = jnumpy.abs(rdm1_tag - rdm1_fit)

                err_mean = jnumpy.linalg.norm(rdm1_err) / numpy.size(rdm1_err)
                err_max  = jnumpy.max(rdm1_err)

                global count, ymin
                ymin = y if ymin is None else min(ymin, y)
                
                if is_debug:
                    print(f"count = {count:4d}, y = {y:6.4e}, ymin = {ymin:6.4e}, " + f"x = [" + " ".join([f"{xi:6.4f}" for xi in x]) + "]")

                print(f"count = {count:4d}, y = {y:6.4e}, ymin = {ymin:6.4e}, " + f"x = [" + " ".join([f"{xi:6.4f}" for xi in x])+"]", file=log)
                count += 1

            kwargs = {
                "method": "bfgs", 
                "jac": lf.grad, "tol": 1e-6, 
                "options": {"disp": False, "maxiter": 1000}
                }

            res = basinhopping(
                lf.func, x0, T=0.1, stepsize=2.0, disp=False,
                callback=callback, minimizer_kwargs=kwargs, 
                niter=4000, niter_success=100, interval=10, 
                )

            x = res.x
            f1es_fit = lf.h1es + lf._get_v1es(x)
            rdm1_fit = lf._get_rdm1(f1es_fit)[0]
            rdm1_err = jnumpy.abs(rdm1_tag - rdm1_fit)
            err_mean = jnumpy.linalg.norm(rdm1_err) / numpy.size(rdm1_err)
            err_max  = jnumpy.max(rdm1_err)

            print(f"\nLoss Function = {res.fun:6.4e}, Error Mean: {err_mean:6.4e}, Max: {err_max:6.4e}, Count: {count}", file=log)
            print(f"Success = {res.lowest_optimization_result.success}", file=log)
            print(f"Message = {res.lowest_optimization_result.message}", file=log)
            print(f"x = " + " ".join([f"{xi:6.4f}" for xi in x]), file=log)
            
            print(res, file=log)

            print_matrix(rdm1_fit,   t="rdm1_fit = ", stdout=log)
            print_matrix(rdm1_tag,   t="rdm1_tag = ", stdout=log)
            print("\n\n" + "#"*20, file=log)#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Junjies-MacBook-Air.local', release='22.5.0', version='Darwin Kernel Version 22.5.0: Thu Jun  8 22:21:34 PDT 2023; root:xnu-8796.121.3~7/RELEASE_ARM64_T8112', machine='arm64')  Threads 1
Python 3.11.3 | packaged by conda-forge | (main, Apr  6 2023, 08:58:31) [Clang 14.0.6 ]
numpy 1.24.3  scipy 1.10.1
Date: Fri Jul 21 17:29:02 2023
PySCF version 2.2.1
PySCF path  /Users/yangjunjie/packages/pyscf/pyscf-2.2.1/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 0
[INPUT] num. electrons = 4
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom

nuclear repulsion = 0
number of shells = 0
number of NR pGTOs = 0
number of NR cGTOs = 0
basis = sto-3g
ecp = {}
CPU time:         0.58


******** <class 'pyscf.scf.uhf.UHF'> ********
method = UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-06
SCF conv_tol_grad = None
SCF max_cycles = 200
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/14/127wb84x5yx1jh4dxrvgcfkm0000gn/T/tmpd1el3d_l
max_memory 4000 MB (current use 0 MB)
number electrons alpha = 2  beta = 2
Overwritten attributes  get_ovlp get_hcore  of <class 'pyscf.scf.uhf.UHF'>
Set gradient conv threshold to 0.001
init E= 0

WARN: alpha nocc = 2  HOMO -0.123105625617661 >= LUMO -0.123105625617661


WARN: beta  nocc = 2  HOMO -0.123105625617661 >= LUMO -0.123105625617661


WARN: system HOMO -0.123105625617661 >= system LUMO -0.123105625617661

cycle= 1 E= -1.61473664196652  delta_E= -1.61  |g|= 1.37  |ddm|= 1.51
  alpha nocc = 2  HOMO = -0.0935945491113234  LUMO = 0.0397593355795284
  beta  nocc = 2  HOMO = -0.0902164882560175  LUMO = 0.0444624492460288
cycle= 2 E= -2.09019079311315  delta_E= -0.475  |g|= 0.671  |ddm|= 0.523
  alpha nocc = 2  HOMO = -0.0670993149275237  LUMO = 0.791059818454697
  beta  nocc = 2  HOMO = 0.0798980362473666  LUMO = 0.542715911337772
cycle= 3 E= -2.30448743152732  delta_E= -0.214  |g|= 0.986  |ddm|= 0.56
  alpha nocc = 2  HOMO = -0.0376046552154612  LUMO = 1.01683673202881
  beta  nocc = 2  HOMO = 0.0175570316331542  LUMO = 0.739641056955997
cycle= 4 E= -2.57705831156335  delta_E= -0.273  |g|= 0.745  |ddm|= 0.236
  alpha nocc = 2  HOMO = -0.0111890711859559  LUMO = 0.720586758325731
  beta  nocc = 2  HOMO = 0.0614051222379413  LUMO = 0.695814007987834
cycle= 5 E= -2.46099502737772  delta_E= 0.116  |g|= 0.76  |ddm|= 0.134
  alpha nocc = 2  HOMO = -0.612913787564459  LUMO = 0.962457617648821
  beta  nocc = 2  HOMO = -0.0338262340672913  LUMO = 1.16890995983481
cycle= 6 E= -3.10028331087378  delta_E= -0.639  |g|= 0.593  |ddm|= 1.14
  alpha nocc = 2  HOMO = -0.636494263265683  LUMO = 0.877604056391133
  beta  nocc = 2  HOMO = -0.0861574630302257  LUMO = 1.678662291142
cycle= 7 E= -3.11435195944987  delta_E= -0.0141  |g|= 0.552  |ddm|= 0.113
  alpha nocc = 2  HOMO = -0.525171404536773  LUMO = 1.0914011565059
  beta  nocc = 2  HOMO = -0.187862998674461  LUMO = 2.19187412939101
cycle= 8 E= -3.15082931836508  delta_E= -0.0365  |g|= 0.276  |ddm|= 0.127
  alpha nocc = 2  HOMO = -0.431454237385213  LUMO = 1.27109852016598
  beta  nocc = 2  HOMO = -0.216543875657881  LUMO = 2.27242612555789
cycle= 9 E= -3.148176533266  delta_E= 0.00265  |g|= 0.193  |ddm|= 0.141
  alpha nocc = 2  HOMO = -0.443859510762423  LUMO = 1.25259137040458
  beta  nocc = 2  HOMO = -0.132460992441114  LUMO = 2.60096049528837
cycle= 10 E= -3.1530906432918  delta_E= -0.00491  |g|= 0.248  |ddm|= 0.0645
  alpha nocc = 2  HOMO = -0.621878594679962  LUMO = 1.0557021998643
  beta  nocc = 2  HOMO = -0.283326037686398  LUMO = 2.84245771661147
cycle= 11 E= -3.17926237337952  delta_E= -0.0262  |g|= 0.116  |ddm|= 0.263
  alpha nocc = 2  HOMO = -0.543111178038509  LUMO = 1.1305370213492
  beta  nocc = 2  HOMO = -0.222450256145906  LUMO = 2.85617009761082
cycle= 12 E= -3.18148647634606  delta_E= -0.00222  |g|= 0.0494  |ddm|= 0.0393
  alpha nocc = 2  HOMO = -0.562631491006138  LUMO = 1.11213716202402
  beta  nocc = 2  HOMO = -0.264339644981178  LUMO = 2.88715813625855
cycle= 13 E= -3.18225880091775  delta_E= -0.000772  |g|= 0.0265  |ddm|= 0.0332
  alpha nocc = 2  HOMO = -0.560675161101119  LUMO = 1.11225476749779
  beta  nocc = 2  HOMO = -0.263146642219232  LUMO = 2.89787739980432
cycle= 14 E= -3.182608156187  delta_E= -0.000349  |g|= 0.0218  |ddm|= 0.0118
  alpha nocc = 2  HOMO = -0.571994573809868  LUMO = 1.09717367742858
  beta  nocc = 2  HOMO = -0.262349025852822  LUMO = 2.93820548437011
cycle= 15 E= -3.18379727050813  delta_E= -0.00119  |g|= 0.0074  |ddm|= 0.0906
  alpha nocc = 2  HOMO = -0.569868778698187  LUMO = 1.09904108745896
  beta  nocc = 2  HOMO = -0.262233601514798  LUMO = 2.93883693969226
cycle= 16 E= -3.1838410838033  delta_E= -4.38e-05  |g|= 0.00123  |ddm|= 0.0102
  alpha nocc = 2  HOMO = -0.567609869442228  LUMO = 1.10095045089531
  beta  nocc = 2  HOMO = -0.26200964210599  LUMO = 2.93872011780316
cycle= 17 E= -3.18384149694009  delta_E= -4.13e-07  |g|= 0.000414  |ddm|= 0.00172
  alpha nocc = 2  HOMO = -0.567864810576882  LUMO = 1.10073506732637
  beta  nocc = 2  HOMO = -0.261995547705124  LUMO = 2.93871201422764
Extra cycle  E= -3.18384156148213  delta_E= -6.45e-08  |g|= 0.000467  |ddm|= 0.000267
converged SCF energy = -3.18384156148213  <S^2> = 1.709047  2S+1 = 2.7993192


RestrictedHartreeFock
Energy: 0.0231, Error Max: 3.9635e-01, Avg: 4.0834e-02

r_rdm1 = 
        #0        #1        #2        #3        #4       
0       0.53532   0.69895   0.50254   0.11849  -0.05632
1       0.69895   0.97677   0.63161  -0.03020  -0.32890
2       0.50254   0.63161   0.48116   0.18196   0.04479
3       0.11849  -0.03020   0.18196   0.55902   0.72331
4      -0.05632  -0.32890   0.04479   0.72331   1.02202
5       0.16057   0.05399   0.21027   0.48405   0.60249
        #5       
0       0.16057
1       0.05399
2       0.21027
3       0.48405
4       0.60249
5       0.42571

u_rdm1_alph = 
        #0        #1        #2        #3        #4       
0       0.26766   0.34947   0.25127   0.05925  -0.02816
1       0.34947   0.48839   0.31580  -0.01510  -0.16445
2       0.25127   0.31580   0.24058   0.09098   0.02239
3       0.05925  -0.01510   0.09098   0.27951   0.36165
4      -0.02816  -0.16445   0.02239   0.36165   0.51101
5       0.08028   0.02699   0.10513   0.24202   0.30124
        #5       
0       0.08028
1       0.02699
2       0.10513
3       0.24202
4       0.30124
5       0.21286

u_rdm1_beta = 
        #0        #1        #2        #3        #4       
0       0.26766   0.34947   0.25127   0.05925  -0.02816
1       0.34947   0.48839   0.31580  -0.01510  -0.16445
2       0.25127   0.31580   0.24058   0.09098   0.02239
3       0.05925  -0.01510   0.09098   0.27951   0.36165
4      -0.02816  -0.16445   0.02239   0.36165   0.51101
5       0.08028   0.02699   0.10513   0.24202   0.30124
        #5       
0       0.08028
1       0.02699
2       0.10513
3       0.24202
4       0.30124
5       0.21286


UnrestrictedHartreeFock
Energy: -3.1838, Error Max: 2.4070e-01, Avg: 1.6822e-02

r_rdm1 = 
        #0        #1        #2        #3        #4       
0       0.90736   0.27556   0.09667  -0.02386   0.09668
1       0.27556   0.54665   0.51193   0.09669   0.01189
2       0.09667   0.51193   0.54607   0.27588   0.04640
3      -0.02386   0.09669   0.27588   0.90720   0.27568
4       0.09668   0.01189   0.04640   0.27568   0.54644
5       0.27576   0.04631   0.01197   0.09668   0.51193
        #5       
0       0.27576
1       0.04631
2       0.01197
3       0.09668
4       0.51193
5       0.54627

u_rdm1_alph = 
        #0        #1        #2        #3        #4       
0       0.01532   0.06097   0.06093   0.01532   0.06092
1       0.06097   0.49273   0.49234   0.06093  -0.00769
2       0.06093   0.49234   0.49195   0.06088  -0.00765
3       0.01532   0.06093   0.06088   0.01532   0.06095
4       0.06092  -0.00769  -0.00765   0.06095   0.49245
5       0.06091  -0.00767  -0.00762   0.06094   0.49234
        #5       
0       0.06091
1      -0.00767
2      -0.00762
3       0.06094
4       0.49234
5       0.49223

u_rdm1_beta = 
        #0        #1        #2        #3        #4       
0       0.89204   0.21459   0.03574  -0.03918   0.03576
1       0.21459   0.05392   0.01959   0.03576   0.01958
2       0.03574   0.01959   0.05412   0.21499   0.05406
3      -0.03918   0.03576   0.21499   0.89189   0.21473
4       0.03576   0.01958   0.05406   0.21473   0.05399
5       0.21485   0.05398   0.01960   0.03574   0.01959
        #5       
0       0.21485
1       0.05398
2       0.01960
3       0.03574
4       0.01959
5       0.05404


DirectSpin1FullConfigurationInteraction
Energy: -4.2080, Error Max: 0.0000e+00, Avg: 0.0000e+00

r_rdm1 = 
        #0        #1        #2        #3        #4       
0       0.66667   0.40225   0.10619  -0.00432   0.10619
1       0.40225   0.66667   0.40225   0.10619  -0.00432
2       0.10619   0.40225   0.66667   0.40225   0.10619
3      -0.00432   0.10619   0.40225   0.66667   0.40225
4       0.10619  -0.00432   0.10619   0.40225   0.66667
5       0.40225   0.10619  -0.00432   0.10619   0.40225
        #5       
0       0.40225
1       0.10619
2      -0.00432
3       0.10619
4       0.40225
5       0.66667

u_rdm1_alph = 
        #0        #1        #2        #3        #4       
0       0.33333   0.20113   0.05309  -0.00216   0.05309
1       0.20113   0.33333   0.20113   0.05309  -0.00216
2       0.05309   0.20113   0.33333   0.20113   0.05309
3      -0.00216   0.05309   0.20113   0.33333   0.20113
4       0.05309  -0.00216   0.05309   0.20113   0.33333
5       0.20113   0.05309  -0.00216   0.05309   0.20113
        #5       
0       0.20113
1       0.05309
2      -0.00216
3       0.05309
4       0.20113
5       0.33333

u_rdm1_beta = 
        #0        #1        #2        #3        #4       
0       0.33333   0.20113   0.05309  -0.00216   0.05309
1       0.20113   0.33333   0.20113   0.05309  -0.00216
2       0.05309   0.20113   0.33333   0.20113   0.05309
3      -0.00216   0.05309   0.20113   0.33333   0.20113
4       0.05309  -0.00216   0.05309   0.20113   0.33333
5       0.20113   0.05309  -0.00216   0.05309   0.20113
        #5       
0       0.20113
1       0.05309
2      -0.00216
3       0.05309
4       0.20113
5       0.33333


#################### GeneralizedSpinLossFunction ####################
Loss Function Info:
stdout = <_io.TextIOWrapper name='./log/hub-u-8.0000-nelec-4.log' mode='w' encoding='UTF-8'>
h1e = [[ 0. -1.  0.  0.  0. -1.]
 [-1.  0. -1.  0.  0.  0.]
 [ 0. -1.  0. -1.  0.  0.]
 [ 0.  0. -1.  0. -1.  0.]
 [ 0.  0.  0. -1.  0. -1.]
 [-1.  0.  0.  0. -1.  0.]]
rdm1_tag = [[ 0.66666667  0.40225417  0.10618866 -0.00432239  0.10618866  0.40225417]
 [ 0.40225417  0.66666667  0.40225417  0.10618866 -0.00432239  0.10618866]
 [ 0.10618866  0.40225417  0.66666667  0.40225417  0.10618866 -0.00432239]
 [-0.00432239  0.10618866  0.40225417  0.66666667  0.40225417  0.10618866]
 [ 0.10618866 -0.00432239  0.10618866  0.40225417  0.66666667  0.40225417]
 [ 0.40225417  0.10618866 -0.00432239  0.10618866  0.40225417  0.66666667]]
fit_inds = [[0 1 2 3 4 5]]
nelecs = (2, 2)
loss_func_type = 1
ind_triu = (Array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5],      dtype=int32), Array([0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 4, 5, 5],      dtype=int32))
num_triu = 21
num_parm = 84
nfrag = 1
nimp = 6
nsite = 6
h1es = [[[ 0. -1.  0.  0.  0. -1.]
  [-1.  0. -1.  0.  0.  0.]
  [ 0. -1.  0. -1.  0.  0.]
  [ 0.  0. -1.  0. -1.  0.]
  [ 0.  0.  0. -1.  0. -1.]
  [-1.  0.  0.  0. -1.  0.]]

 [[ 0.  0.  0.  0.  0.  0.]
  [ 0.  0.  0.  0.  0.  0.]
  [ 0.  0.  0.  0.  0.  0.]
  [ 0.  0.  0.  0.  0.  0.]
  [ 0.  0.  0.  0.  0.  0.]
  [ 0.  0.  0.  0.  0.  0.]]

 [[ 0.  0.  0.  0.  0.  0.]
  [ 0.  0.  0.  0.  0.  0.]
  [ 0.  0.  0.  0.  0.  0.]
  [ 0.  0.  0.  0.  0.  0.]
  [ 0.  0.  0.  0.  0.  0.]
  [ 0.  0.  0.  0.  0.  0.]]

 [[ 0. -1.  0.  0.  0. -1.]
  [-1.  0. -1.  0.  0.  0.]
  [ 0. -1.  0. -1.  0.  0.]
  [ 0.  0. -1.  0. -1.  0.]
  [ 0.  0.  0. -1.  0. -1.]
  [-1.  0.  0.  0. -1.  0.]]]
_get_v1es = <function LossFunctionMixin._gen_get_v1es.<locals>.get_v1es at 0x11159c220>
_get_rdm1 = <function GeneralizedSpinLossFunction._gen_get_rdm1.<locals>.get_rdm1 at 0x11159d6c0>
func = <function LossFunctionMixin.__init__.<locals>.<lambda> at 0x11159ce00>
grad = <function LossFunctionMixin.__init__.<locals>.<lambda> at 0x11159d1c0>
hess = <function LossFunctionMixin.__init__.<locals>.<lambda> at 0x11159cfe0>
#####################################################################


####################
GeneralizedSpinLossFunction
nimp = 6, nsite = 6
nelecs = (2, 2)
loss_func_type = 1
count =    0, y = 1.4692e+00, ymin = 1.4692e+00, x = [0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000]
count =    1, y = 1.4623e-06, ymin = 1.4623e-06, x = [3.2034 -0.8627 0.0564 2.0141 1.5543 -1.1094 0.1597 -2.2847 0.6426 0.6681 -0.6969 0.3632 -1.0301 -0.8160 0.7559 2.3120 -1.7877 -0.1087 -0.2271 -2.6394 -0.2929 1.6115 -2.8909 -1.0228 -0.3149 0.3279 2.4111 -1.2858 -0.4020 -1.4126 -1.0500 0.9128 1.7409 0.9532 1.4850 0.0682 -0.6543 1.1324 0.2487 -0.0531 2.4406 -0.0944 -0.3477 0.6638 -0.8678 -1.1332 0.8296 2.0538 -1.3019 0.9138 -1.7846 -2.3272 -0.4988 -0.5123 1.5076 -1.8096 0.9698 -0.4895 -0.2886 -1.7674 1.6522 -0.6310 1.4155 -0.8104 -1.0943 -1.5079 -2.4760 -2.5511 -1.1266 1.2294 0.4286 -0.8343 -1.1340 0.1395 1.9465 -1.3920 -0.2645 -1.1405 0.1822 0.5360 -0.9315 0.6964 -0.6317 0.7897]
count =    2, y = 1.4571e-06, ymin = 1.4571e-06, x = [2.8524 -1.6324 0.0165 3.0073 2.4694 -2.0444 -1.2571 -3.2537 -0.3212 -0.0262 0.1934 -1.0369 -2.0264 -0.2721 1.0649 4.1153 -0.9470 -0.9963 -1.1372 -2.7402 -1.3950 2.4724 -2.4111 0.1571 -1.5134 -1.1821 4.4067 -0.2379 0.4407 -1.6882 -2.5102 1.0394 0.5213 1.2017 0.3960 1.6491 -0.0235 2.2842 -0.7874 0.4648 3.8839 -0.0245 1.3714 1.3819 -3.0123 -2.7121 0.1909 2.2726 -0.0919 -0.6932 -3.6460 -2.4269 -2.7986 -1.4202 3.4958 -3.8191 1.2825 0.9353 -1.5898 -0.5525 2.4193 -1.8982 3.7669 1.1660 -2.5412 -1.9113 -2.9015 -5.0689 -1.9874 0.6697 0.7674 -0.6162 -0.9626 -0.3147 3.8450 -2.3830 -1.6346 -0.9849 -0.9785 -1.4314 -1.5717 1.1550 0.1037 1.5979]
count =    3, y = 1.7957e-06, ymin = 1.4571e-06, x = [2.6767 -1.0375 -0.9849 4.1592 2.8856 -3.3981 -1.7535 -3.0232 -0.4785 1.0031 -0.2749 -1.8389 -1.7705 -0.7505 2.7547 5.4415 -0.1742 -2.4554 -1.2480 -2.9762 -2.0145 2.5699 -4.1653 -0.0911 -2.1902 -0.0190 3.7607 0.3731 0.3730 -1.6731 -3.2782 0.6078 1.8764 0.4921 1.8467 1.8664 -0.3530 1.6978 -2.6085 1.5526 4.3323 1.3420 0.6117 2.0248 -4.3224 -1.9914 1.7362 2.6636 -1.5230 -0.6972 -2.3567 -2.9204 -3.0102 -2.5219 4.1241 -5.3022 0.2142 2.6261 -2.9509 -0.6528 1.3450 -1.3016 4.8871 -0.3434 -3.3772 -0.0307 -2.8188 -4.6529 -3.0067 0.5600 -0.0296 -0.4343 -1.0134 -1.1483 5.1017 -4.0757 -2.0741 -1.3654 -1.3528 -2.4899 -1.4805 0.0614 1.3867 2.7134]
count =    4, y = 1.8952e-06, ymin = 1.4571e-06, x = [3.6927 -1.4785 -0.4849 4.7971 2.6553 -3.6728 -0.1667 -3.4377 -1.4220 1.4262 -1.3575 -1.0245 -1.9028 -1.6765 3.1046 4.9559 -0.8085 -2.2621 -0.8722 -3.1495 -2.2523 3.0157 -2.9287 0.5072 -3.9803 -0.6012 3.2659 1.1562 -0.0071 -2.5925 -4.2441 1.2396 3.3361 1.7103 0.4718 2.7695 -0.8755 1.4826 -1.6065 1.3801 5.6698 1.6695 2.3548 0.6908 -3.4042 -1.0527 1.3801 1.5107 -3.0653 -0.2503 -1.7794 -2.9038 -3.7700 -2.8439 3.6117 -4.8654 -0.1242 1.5761 -1.5003 -1.6771 1.7390 -0.4271 6.3224 -0.3794 -3.3899 -0.0994 -2.7879 -6.0353 -4.7295 0.8464 0.3894 -0.3223 -1.2326 -1.2510 6.2586 -5.5096 -3.1692 -1.5518 -1.4910 -2.7433 -1.3600 1.1896 1.2720 3.9616]
count =    5, y = 1.4568e-06, ymin = 1.4568e-06, x = [3.8069 -1.6059 -1.0886 3.6376 2.9994 -2.8902 -0.3749 -4.4609 0.6159 1.3759 -1.4919 -2.0263 -3.7063 -1.5459 3.2437 5.0440 0.4339 -3.4548 -1.4384 -3.5544 -2.7021 4.8668 -3.1255 0.3750 -2.6260 -1.2513 3.1693 2.4797 1.0992 -2.1284 -4.6523 0.2730 5.5020 0.5705 0.1924 4.2340 0.9683 2.9801 -1.7007 0.4855 7.4696 0.3507 1.9492 -0.5348 -3.7010 -0.4632 1.5623 0.8581 -3.7850 -0.0876 -1.0744 -3.1900 -2.6731 -3.9772 2.6430 -4.4475 -1.3392 2.0750 -0.1251 -0.6299 2.8006 -0.0650 7.3372 1.2544 -2.3780 -1.4667 -1.5387 -6.4935 -6.2970 0.0643 2.7243 -1.0333 -0.6232 -0.8149 5.1853 -5.0601 -2.2287 -1.0791 -3.1605 -3.8108 -2.7442 0.3238 2.1122 4.7822]
count =    6, y = 2.9434e-06, ymin = 1.4568e-06, x = [4.8970 -2.3495 -1.6836 1.6870 3.1937 -1.3683 -0.3123 -6.4742 0.3349 1.4304 -0.7523 -2.8300 -1.9400 -0.1816 2.8310 4.1209 0.7292 -4.0522 -0.1945 -4.6906 -2.0291 5.3368 -2.8807 -0.3024 -2.9927 -2.9039 5.0772 2.8962 2.0567 -1.5309 -5.4064 1.1167 6.3954 -0.2437 -0.0628 4.5752 -0.8761 2.3809 -2.6545 0.5742 6.8887 0.7768 2.8208 -1.5879 -4.9291 0.7614 1.5106 2.3573 -3.1215 -1.6582 -0.7281 -4.8809 -2.8532 -3.3093 3.8326 -2.9284 -1.0478 3.2199 0.7067 -1.1586 4.2965 -0.4949 7.2371 1.6820 -3.9731 -2.2835 -1.4480 -7.5424 -7.5640 1.1510 2.0080 -1.9812 -0.3867 -0.6086 6.8811 -7.8032 -0.5543 -0.1106 -3.0394 -4.9724 -3.3302 -0.2279 1.1669 5.9354]
count =    7, y = 2.9473e-06, ymin = 1.4568e-06, x = [4.1188 -1.5474 -0.6227 1.4570 2.7019 -1.6648 -2.0029 -8.0153 -0.1952 0.1045 -1.8669 -3.3554 -3.9121 -0.7120 2.5988 6.0092 -0.3929 -5.7000 -0.9527 -5.4001 -2.6081 6.2600 -3.8175 0.3308 -4.8845 -4.7418 5.8980 2.6487 0.6307 -0.5340 -5.8001 0.2788 7.0230 -0.7289 0.9111 5.3627 -2.0824 0.4860 -3.9156 0.7805 8.4969 1.8839 1.4380 -1.8326 -3.3119 0.4433 0.1776 1.7217 -5.0448 -4.1678 -1.9544 -5.5379 -2.6822 -3.5667 3.6108 -4.5135 -0.3142 5.1639 1.3226 -1.4520 4.5961 -1.5192 5.6066 -0.2905 -5.3097 -3.1594 -0.4081 -6.7676 -7.1948 -0.2260 3.2671 -1.5616 -1.0844 -0.5539 5.7447 -7.1504 -1.1342 1.6600 -3.8545 -5.0325 -3.2331 -0.7099 0.6862 6.0065]
count =    8, y = 2.0376e-06, ymin = 1.4568e-06, x = [3.4480 -2.0816 -0.7950 1.0808 2.2913 -0.9295 -3.2333 -7.8836 -0.2906 0.8542 -3.0792 -4.2822 -4.4505 -1.6415 2.0718 6.0594 -1.8861 -4.8590 -0.3495 -6.8482 -3.1435 7.7579 -5.0521 -0.3390 -4.1663 -3.9117 5.9800 1.3694 0.9186 -0.3515 -6.6673 0.1440 8.1070 -1.7337 0.7154 5.6264 -1.4234 -0.6410 -3.0616 -0.8420 7.6593 2.9376 1.0791 -1.3195 -4.0823 -0.9368 -1.0474 2.7686 -5.2100 -5.2537 -3.9761 -6.2602 -2.6496 -5.1169 2.5306 -4.3974 -1.7976 4.1267 2.8318 -1.9589 3.2920 -1.2632 4.2533 0.9760 -4.6222 -3.3538 -1.4326 -7.3699 -7.4949 -1.2209 2.8309 -1.7704 -1.7741 -0.7782 6.7654 -6.7377 -0.0972 0.7084 -3.6172 -3.6268 -2.2513 -2.2077 1.0769 6.1590]
count =    9, y = 1.2552e-06, ymin = 1.2552e-06, x = [3.0818 -2.0736 -0.3230 1.2607 2.1561 -0.3428 -3.1821 -6.6830 -0.1052 0.8979 -2.0554 -3.0185 -4.2016 -1.2764 1.3005 7.3175 -1.1696 -4.8969 -1.3780 -7.4271 -1.3578 8.6737 -5.2859 -1.0809 -4.7522 -4.0412 7.9545 0.3734 0.9042 -1.3004 -5.3004 0.5392 8.2748 -2.1322 2.5109 6.1574 -1.8560 0.6633 -3.8325 0.6018 8.1293 3.3796 3.0112 -1.4878 -6.1322 -1.4218 -0.1006 1.9367 -5.3655 -4.6035 -4.2337 -4.9518 -3.3350 -6.4591 1.7733 -5.6595 -0.0076 4.6473 3.5741 -1.9347 3.9546 -3.2397 4.3236 1.2202 -6.0542 -1.9692 -1.8536 -5.9695 -7.2496 -2.4606 2.4427 -0.1394 -2.0735 -1.4551 6.2468 -7.8655 -1.3988 1.0611 -4.6113 -4.0739 -1.4816 -3.6756 1.9921 6.2356]
count =   10, y = 1.4769e-06, ymin = 1.2552e-06, x = [4.7958 -2.5150 -2.3312 2.4166 2.3615 -2.1607 -3.9218 -8.4294 -0.7084 0.0648 -1.3068 -3.0199 -3.5564 -2.2331 0.6175 7.6314 0.5701 -5.4565 -2.5538 -7.2992 -1.4177 9.0596 -6.0453 -2.1198 -3.0634 -2.9049 9.7124 1.1617 0.7345 -0.1489 -3.9383 -0.1865 9.2924 -2.4267 0.6122 7.5615 -0.9671 0.8955 -2.2323 1.7068 7.0140 4.8663 3.1464 -0.6242 -8.3276 -3.5489 -0.4318 3.4131 -6.3440 -7.1228 -6.6387 -5.1953 -1.7374 -4.4761 1.5333 -5.1280 0.0342 5.0442 5.4083 -0.8508 3.2668 -3.6020 4.1460 0.0905 -5.4204 -2.0783 -2.5091 -6.8262 -7.3891 -2.4561 3.7403 -1.2635 -2.8390 -2.8337 7.2753 -7.5297 -2.5658 -0.0255 -5.8436 -4.1437 -1.3948 -3.5284 1.9566 6.7659]
count =   11, y = 3.1322e-06, ymin = 1.2552e-06, x = [6.5006 -0.8427 -3.9108 1.1797 0.0689 -0.2948 -5.2539 -7.6883 -1.4922 0.4581 -2.4911 -4.3817 -3.6308 -1.9336 -0.2797 7.2335 0.4600 -6.6161 -3.6256 -8.8437 -2.2839 8.8286 -6.3010 -2.7979 -4.0049 -4.4879 11.1365 -0.1584 -0.5769 0.0486 -6.2964 0.2141 10.7881 -3.2410 1.0185 6.6759 0.8032 2.3244 -2.1966 -0.0064 5.5834 5.2818 3.0168 -0.0179 -10.0195 -3.6325 0.4286 3.1475 -6.6617 -7.0610 -4.5292 -5.0969 -1.1877 -5.9862 0.0397 -3.7847 1.1331 4.4022 7.1758 -3.4475 5.1421 -2.0353 2.1204 -0.5378 -4.9307 -2.3746 -2.2468 -7.0320 -7.6042 -4.3318 4.9468 -2.0090 -3.1351 -1.0618 8.2209 -9.5182 -2.1379 -0.7903 -5.5179 -5.1260 -1.9940 -1.8717 2.7357 7.5870]
count =   12, y = 1.3641e-06, ymin = 1.2552e-06, x = [5.7417 -3.0179 -2.1963 0.4210 0.0585 -0.6551 -4.5860 -7.1350 -1.8417 1.1453 -1.7459 -5.0231 -2.7441 -1.0586 -0.9142 6.4768 -0.8851 -6.0971 -1.6761 -10.3485 -0.8809 7.0139 -4.3719 -1.8299 -3.8705 -5.5818 13.3354 -0.5748 0.3854 0.3221 -6.5859 1.0671 13.1622 -3.4327 -1.3796 6.3473 2.1209 1.3863 -4.6997 -0.7587 5.0559 6.2084 4.4029 0.1816 -11.5012 -3.6333 -1.7178 2.4348 -9.1041 -7.4682 -3.2358 -5.3482 -3.3981 -7.7532 0.7416 -2.4683 1.1168 3.3613 7.7809 -3.9885 6.8195 -1.5866 3.6071 0.5538 -4.0753 -1.0403 -1.6219 -9.0734 -7.9621 -4.1930 4.8553 -2.8874 -2.6226 -2.2349 8.1452 -10.7742 -2.6705 -0.1093 -5.6954 -5.4884 -0.6861 0.2199 1.8837 8.5027]
count =   13, y = 1.8619e-06, ymin = 1.2552e-06, x = [7.2723 -2.9031 -1.4268 -1.3625 0.4078 -0.6250 -6.5278 -6.1260 -3.3702 1.0929 -1.5055 -6.2901 -1.6101 -0.6923 -0.1933 6.3061 -0.5012 -5.7041 -2.3166 -10.8548 -1.1040 8.7567 -2.7838 -0.5179 -4.0754 -7.0114 13.5946 0.0364 -0.8536 -0.4253 -5.7452 2.1248 11.4847 -1.6504 -1.7839 7.5570 0.0186 2.4283 -3.6886 0.3070 4.9496 6.9117 4.2871 -2.0425 -10.7237 -5.2598 -0.6602 0.8634 -7.4074 -6.2221 -2.8622 -4.6478 -3.3734 -7.2086 1.6063 -3.7527 2.3800 4.0178 6.6825 -4.5988 5.9607 -1.5847 2.7717 -0.4936 -3.6422 -3.1011 -2.5462 -8.5027 -6.3876 -5.2285 5.2735 -3.6831 -2.6997 -2.2560 7.3673 -11.2898 -4.8050 0.1574 -8.0452 -6.6659 -2.0827 -0.2714 0.6893 8.4649]
